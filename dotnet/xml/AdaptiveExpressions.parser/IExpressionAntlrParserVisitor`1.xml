<Type Name="IExpressionAntlrParserVisitor&lt;Result&gt;" FullName="AdaptiveExpressions.parser.IExpressionAntlrParserVisitor&lt;Result&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fbd7007dc3c213e80fb23d50b3e75621e2be84e6" /><Meta Name="ms.sourcegitcommit" Value="d974a0b93f13db7720fcb332f37bf8a404d77e43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/20/2020" /><Meta Name="ms.locfileid" Value="93150286" /></Metadata><TypeSignature Language="C#" Value="public interface IExpressionAntlrParserVisitor&lt;Result&gt; : Antlr4.Runtime.Tree.IParseTreeVisitor&lt;Result&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExpressionAntlrParserVisitor`1&lt;Result&gt; implements class Antlr4.Runtime.Tree.IParseTreeVisitor`1&lt;!Result&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExpressionAntlrParserVisitor(Of Result)&#xA;Implements IParseTreeVisitor(Of Result)" />
  <TypeSignature Language="F#" Value="type IExpressionAntlrParserVisitor&lt;'Result&gt; = interface&#xA;    interface IParseTreeVisitor&lt;'Result&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="Result" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Antlr4.Runtime.Tree.IParseTreeVisitor&lt;Result&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="Result">O tipo de retorno da operação de visita.</typeparam>
    <summary>Essa interface define um visitante genérico completo para uma árvore de análise produzida pelo <see cref="T:AdaptiveExpressions.parser.ExpressionAntlrParser" /> .</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="VisitArgsList">
      <MemberSignature Language="C#" Value="public Result VisitArgsList (AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitArgsList(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArgsListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitArgsList(AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitArgsList (context As ExpressionAntlrParser.ArgsListContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitArgsList : AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitArgsList context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArgsListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.argsList" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayCreationExp">
      <MemberSignature Language="C#" Value="public Result VisitArrayCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitArrayCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArrayCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitArrayCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitArrayCreationExp (context As ExpressionAntlrParser.ArrayCreationExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitArrayCreationExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArrayCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>arrayCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryOpExp">
      <MemberSignature Language="C#" Value="public Result VisitBinaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitBinaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/BinaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitBinaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitBinaryOpExp (context As ExpressionAntlrParser.BinaryOpExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitBinaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitBinaryOpExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+BinaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>binaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitExpression">
      <MemberSignature Language="C#" Value="public Result VisitExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/ExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitExpression (context As ExpressionAntlrParser.ExpressionContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitExpression context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitFile">
      <MemberSignature Language="C#" Value="public Result VisitFile (AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitFile(class AdaptiveExpressions.parser.ExpressionAntlrParser/FileContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitFile(AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitFile (context As ExpressionAntlrParser.FileContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitFile : AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitFile context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FileContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.file" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitFuncInvokeExp">
      <MemberSignature Language="C#" Value="public Result VisitFuncInvokeExp (AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitFuncInvokeExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/FuncInvokeExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitFuncInvokeExp (context As ExpressionAntlrParser.FuncInvokeExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitFuncInvokeExp : AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitFuncInvokeExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FuncInvokeExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>funcInvokeExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitIdAtom">
      <MemberSignature Language="C#" Value="public Result VisitIdAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitIdAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/IdAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitIdAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitIdAtom (context As ExpressionAntlrParser.IdAtomContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitIdAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitIdAtom context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IdAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>idAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitIndexAccessExp">
      <MemberSignature Language="C#" Value="public Result VisitIndexAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitIndexAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/IndexAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitIndexAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitIndexAccessExp (context As ExpressionAntlrParser.IndexAccessExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitIndexAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitIndexAccessExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IndexAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>indexAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitJsonCreationExp">
      <MemberSignature Language="C#" Value="public Result VisitJsonCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitJsonCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/JsonCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitJsonCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitJsonCreationExp (context As ExpressionAntlrParser.JsonCreationExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitJsonCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitJsonCreationExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+JsonCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>jsonCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitKey">
      <MemberSignature Language="C#" Value="public Result VisitKey (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitKey(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitKey(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitKey (context As ExpressionAntlrParser.KeyContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitKey : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitKey context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.key" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitKeyValuePair">
      <MemberSignature Language="C#" Value="public Result VisitKeyValuePair (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitKeyValuePair(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitKeyValuePair(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitKeyValuePair (context As ExpressionAntlrParser.KeyValuePairContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitKeyValuePair : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitKeyValuePair context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePair" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitKeyValuePairList">
      <MemberSignature Language="C#" Value="public Result VisitKeyValuePairList (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitKeyValuePairList(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitKeyValuePairList(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitKeyValuePairList (context As ExpressionAntlrParser.KeyValuePairListContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitKeyValuePairList : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitKeyValuePairList context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePairList" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitLambda">
      <MemberSignature Language="C#" Value="public Result VisitLambda (AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitLambda(class AdaptiveExpressions.parser.ExpressionAntlrParser/LambdaContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitLambda(AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitLambda (context As ExpressionAntlrParser.LambdaContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitLambda : AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitLambda context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+LambdaContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.lambda" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAccessExp">
      <MemberSignature Language="C#" Value="public Result VisitMemberAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitMemberAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/MemberAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitMemberAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitMemberAccessExp (context As ExpressionAntlrParser.MemberAccessExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitMemberAccessExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+MemberAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>memberAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitNumericAtom">
      <MemberSignature Language="C#" Value="public Result VisitNumericAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitNumericAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/NumericAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitNumericAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitNumericAtom (context As ExpressionAntlrParser.NumericAtomContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitNumericAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitNumericAtom context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+NumericAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>numericAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesisExp">
      <MemberSignature Language="C#" Value="public Result VisitParenthesisExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitParenthesisExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ParenthesisExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitParenthesisExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitParenthesisExp (context As ExpressionAntlrParser.ParenthesisExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesisExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitParenthesisExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ParenthesisExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>parenthesisExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitPrimaryExp">
      <MemberSignature Language="C#" Value="public Result VisitPrimaryExp (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitPrimaryExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitPrimaryExp(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitPrimaryExp (context As ExpressionAntlrParser.PrimaryExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitPrimaryExp : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitPrimaryExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>primaryExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitPrimaryExpression">
      <MemberSignature Language="C#" Value="public Result VisitPrimaryExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitPrimaryExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitPrimaryExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitPrimaryExpression (context As ExpressionAntlrParser.PrimaryExpressionContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitPrimaryExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitPrimaryExpression context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitStringAtom">
      <MemberSignature Language="C#" Value="public Result VisitStringAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitStringAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitStringAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitStringAtom (context As ExpressionAntlrParser.StringAtomContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitStringAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitStringAtom context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>stringAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitStringInterpolation">
      <MemberSignature Language="C#" Value="public Result VisitStringInterpolation (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitStringInterpolation(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitStringInterpolation(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitStringInterpolation (context As ExpressionAntlrParser.StringInterpolationContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitStringInterpolation : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitStringInterpolation context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.stringInterpolation" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitStringInterpolationAtom">
      <MemberSignature Language="C#" Value="public Result VisitStringInterpolationAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitStringInterpolationAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitStringInterpolationAtom (context As ExpressionAntlrParser.StringInterpolationAtomContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitStringInterpolationAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitStringInterpolationAtom context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>stringInterpolationAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitTextContent">
      <MemberSignature Language="C#" Value="public Result VisitTextContent (AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitTextContent(class AdaptiveExpressions.parser.ExpressionAntlrParser/TextContentContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitTextContent(AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitTextContent (context As ExpressionAntlrParser.TextContentContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitTextContent : AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitTextContent context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+TextContentContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.textContent" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
    <Member MemberName="VisitUnaryOpExp">
      <MemberSignature Language="C#" Value="public Result VisitUnaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !Result VisitUnaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/UnaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.IExpressionAntlrParserVisitor`1.VisitUnaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function VisitUnaryOpExp (context As ExpressionAntlrParser.UnaryOpExpContext) As Result" />
      <MemberSignature Language="F#" Value="abstract member VisitUnaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext -&gt; 'Result" Usage="iExpressionAntlrParserVisitor.VisitUnaryOpExp context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Result</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+UnaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Visite uma árvore de análise produzida pelo <c>unaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <return>O resultado do visitante.</return>
      </Docs>
    </Member>
  </Members>
</Type>
