<Type Name="ExpressionAntlrParserBaseListener" FullName="AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ff5458093d0ca2cd19dc83b093e40d83e178e97" /><Meta Name="ms.sourcegitcommit" Value="d974a0b93f13db7720fcb332f37bf8a404d77e43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/20/2020" /><Meta Name="ms.locfileid" Value="93150296" /></Metadata><TypeSignature Language="C#" Value="public class ExpressionAntlrParserBaseListener : AdaptiveExpressions.parser.IExpressionAntlrParserListener, Antlr4.Runtime.Tree.IParseTreeListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionAntlrParserBaseListener extends System.Object implements class AdaptiveExpressions.parser.IExpressionAntlrParserListener, class Antlr4.Runtime.Tree.IParseTreeListener" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionAntlrParserBaseListener&#xA;Implements IExpressionAntlrParserListener, IParseTreeListener" />
  <TypeSignature Language="F#" Value="type ExpressionAntlrParserBaseListener = class&#xA;    interface IExpressionAntlrParserListener&#xA;    interface IParseTreeListener" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>AdaptiveExpressions.parser.IExpressionAntlrParserListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Antlr4.Runtime.Tree.IParseTreeListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Essa classe fornece uma implementação vazia do <see cref="T:AdaptiveExpressions.parser.IExpressionAntlrParserListener" /> , que pode ser estendida para criar um ouvinte que precisa apenas manipular um subconjunto dos métodos disponíveis.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionAntlrParserBaseListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterArgsList">
      <MemberSignature Language="C#" Value="public virtual void EnterArgsList (AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterArgsList(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArgsListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterArgsList(AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterArgsList (context As ExpressionAntlrParser.ArgsListContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterArgsList : AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext -&gt; unit&#xA;override this.EnterArgsList : AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterArgsList context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterArgsList(AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArgsListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.argsList" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterArrayCreationExp">
      <MemberSignature Language="C#" Value="public virtual void EnterArrayCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterArrayCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArrayCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterArrayCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterArrayCreationExp (context As ExpressionAntlrParser.ArrayCreationExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterArrayCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext -&gt; unit&#xA;override this.EnterArrayCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterArrayCreationExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterArrayCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArrayCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>arrayCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterBinaryOpExp">
      <MemberSignature Language="C#" Value="public virtual void EnterBinaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterBinaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/BinaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterBinaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterBinaryOpExp (context As ExpressionAntlrParser.BinaryOpExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterBinaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext -&gt; unit&#xA;override this.EnterBinaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterBinaryOpExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterBinaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+BinaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>binaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterEveryRule">
      <MemberSignature Language="C#" Value="public virtual void EnterEveryRule (Antlr4.Runtime.ParserRuleContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterEveryRule(class Antlr4.Runtime.ParserRuleContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterEveryRule (context As ParserRuleContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterEveryRule : Antlr4.Runtime.ParserRuleContext -&gt; unit&#xA;override this.EnterEveryRule : Antlr4.Runtime.ParserRuleContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterEveryRule context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Antlr4.Runtime.Tree.IParseTreeListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Antlr4.Runtime.ParserRuleContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>A implementação padrão não faz nada.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="EnterExpression">
      <MemberSignature Language="C#" Value="public virtual void EnterExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/ExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterExpression (context As ExpressionAntlrParser.ExpressionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext -&gt; unit&#xA;override this.EnterExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterExpression context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterFile">
      <MemberSignature Language="C#" Value="public virtual void EnterFile (AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterFile(class AdaptiveExpressions.parser.ExpressionAntlrParser/FileContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterFile(AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterFile (context As ExpressionAntlrParser.FileContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterFile : AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext -&gt; unit&#xA;override this.EnterFile : AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterFile context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterFile(AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FileContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.file" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterFuncInvokeExp">
      <MemberSignature Language="C#" Value="public virtual void EnterFuncInvokeExp (AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterFuncInvokeExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/FuncInvokeExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterFuncInvokeExp(AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterFuncInvokeExp (context As ExpressionAntlrParser.FuncInvokeExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterFuncInvokeExp : AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext -&gt; unit&#xA;override this.EnterFuncInvokeExp : AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterFuncInvokeExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterFuncInvokeExp(AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FuncInvokeExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>funcInvokeExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterIdAtom">
      <MemberSignature Language="C#" Value="public virtual void EnterIdAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterIdAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/IdAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterIdAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterIdAtom (context As ExpressionAntlrParser.IdAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterIdAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext -&gt; unit&#xA;override this.EnterIdAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterIdAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterIdAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IdAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>idAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterIndexAccessExp">
      <MemberSignature Language="C#" Value="public virtual void EnterIndexAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterIndexAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/IndexAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterIndexAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterIndexAccessExp (context As ExpressionAntlrParser.IndexAccessExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterIndexAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext -&gt; unit&#xA;override this.EnterIndexAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterIndexAccessExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterIndexAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IndexAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>indexAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterJsonCreationExp">
      <MemberSignature Language="C#" Value="public virtual void EnterJsonCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterJsonCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/JsonCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterJsonCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterJsonCreationExp (context As ExpressionAntlrParser.JsonCreationExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterJsonCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext -&gt; unit&#xA;override this.EnterJsonCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterJsonCreationExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterJsonCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+JsonCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>jsonCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterKey">
      <MemberSignature Language="C#" Value="public virtual void EnterKey (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterKey(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterKey(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterKey (context As ExpressionAntlrParser.KeyContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterKey : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext -&gt; unit&#xA;override this.EnterKey : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterKey context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterKey(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.key" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterKeyValuePair">
      <MemberSignature Language="C#" Value="public virtual void EnterKeyValuePair (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterKeyValuePair(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterKeyValuePair(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterKeyValuePair (context As ExpressionAntlrParser.KeyValuePairContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterKeyValuePair : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext -&gt; unit&#xA;override this.EnterKeyValuePair : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterKeyValuePair context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterKeyValuePair(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePair" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterKeyValuePairList">
      <MemberSignature Language="C#" Value="public virtual void EnterKeyValuePairList (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterKeyValuePairList(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterKeyValuePairList(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterKeyValuePairList (context As ExpressionAntlrParser.KeyValuePairListContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterKeyValuePairList : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext -&gt; unit&#xA;override this.EnterKeyValuePairList : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterKeyValuePairList context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterKeyValuePairList(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePairList" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterLambda">
      <MemberSignature Language="C#" Value="public virtual void EnterLambda (AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterLambda(class AdaptiveExpressions.parser.ExpressionAntlrParser/LambdaContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterLambda(AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterLambda (context As ExpressionAntlrParser.LambdaContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterLambda : AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext -&gt; unit&#xA;override this.EnterLambda : AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterLambda context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterLambda(AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+LambdaContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.lambda" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterMemberAccessExp">
      <MemberSignature Language="C#" Value="public virtual void EnterMemberAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterMemberAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/MemberAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterMemberAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterMemberAccessExp (context As ExpressionAntlrParser.MemberAccessExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterMemberAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext -&gt; unit&#xA;override this.EnterMemberAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterMemberAccessExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterMemberAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+MemberAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>memberAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterNumericAtom">
      <MemberSignature Language="C#" Value="public virtual void EnterNumericAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterNumericAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/NumericAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterNumericAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterNumericAtom (context As ExpressionAntlrParser.NumericAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterNumericAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext -&gt; unit&#xA;override this.EnterNumericAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterNumericAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterNumericAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+NumericAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>numericAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterParenthesisExp">
      <MemberSignature Language="C#" Value="public virtual void EnterParenthesisExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterParenthesisExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ParenthesisExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterParenthesisExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterParenthesisExp (context As ExpressionAntlrParser.ParenthesisExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterParenthesisExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext -&gt; unit&#xA;override this.EnterParenthesisExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterParenthesisExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterParenthesisExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ParenthesisExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>parenthesisExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterPrimaryExp">
      <MemberSignature Language="C#" Value="public virtual void EnterPrimaryExp (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterPrimaryExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterPrimaryExp(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterPrimaryExp (context As ExpressionAntlrParser.PrimaryExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterPrimaryExp : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext -&gt; unit&#xA;override this.EnterPrimaryExp : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterPrimaryExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterPrimaryExp(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>primaryExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterPrimaryExpression">
      <MemberSignature Language="C#" Value="public virtual void EnterPrimaryExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterPrimaryExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterPrimaryExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterPrimaryExpression (context As ExpressionAntlrParser.PrimaryExpressionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterPrimaryExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext -&gt; unit&#xA;override this.EnterPrimaryExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterPrimaryExpression context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterPrimaryExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterStringAtom">
      <MemberSignature Language="C#" Value="public virtual void EnterStringAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStringAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterStringAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterStringAtom (context As ExpressionAntlrParser.StringAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterStringAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext -&gt; unit&#xA;override this.EnterStringAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterStringAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterStringAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>stringAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterStringInterpolation">
      <MemberSignature Language="C#" Value="public virtual void EnterStringInterpolation (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStringInterpolation(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterStringInterpolation(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterStringInterpolation (context As ExpressionAntlrParser.StringInterpolationContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterStringInterpolation : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext -&gt; unit&#xA;override this.EnterStringInterpolation : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterStringInterpolation context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterStringInterpolation(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.stringInterpolation" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterStringInterpolationAtom">
      <MemberSignature Language="C#" Value="public virtual void EnterStringInterpolationAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStringInterpolationAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterStringInterpolationAtom (context As ExpressionAntlrParser.StringInterpolationAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterStringInterpolationAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext -&gt; unit&#xA;override this.EnterStringInterpolationAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterStringInterpolationAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>stringInterpolationAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterTextContent">
      <MemberSignature Language="C#" Value="public virtual void EnterTextContent (AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterTextContent(class AdaptiveExpressions.parser.ExpressionAntlrParser/TextContentContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterTextContent(AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterTextContent (context As ExpressionAntlrParser.TextContentContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterTextContent : AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext -&gt; unit&#xA;override this.EnterTextContent : AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterTextContent context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterTextContent(AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+TextContentContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.textContent" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterUnaryOpExp">
      <MemberSignature Language="C#" Value="public virtual void EnterUnaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterUnaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/UnaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.EnterUnaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnterUnaryOpExp (context As ExpressionAntlrParser.UnaryOpExpContext)" />
      <MemberSignature Language="F#" Value="abstract member EnterUnaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext -&gt; unit&#xA;override this.EnterUnaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.EnterUnaryOpExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.EnterUnaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+UnaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Insira uma árvore de análise produzida pelo <c>unaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitArgsList">
      <MemberSignature Language="C#" Value="public virtual void ExitArgsList (AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitArgsList(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArgsListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitArgsList(AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitArgsList (context As ExpressionAntlrParser.ArgsListContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitArgsList : AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext -&gt; unit&#xA;override this.ExitArgsList : AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitArgsList context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitArgsList(AdaptiveExpressions.parser.ExpressionAntlrParser.ArgsListContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArgsListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.argsList" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitArrayCreationExp">
      <MemberSignature Language="C#" Value="public virtual void ExitArrayCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitArrayCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ArrayCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitArrayCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitArrayCreationExp (context As ExpressionAntlrParser.ArrayCreationExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitArrayCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext -&gt; unit&#xA;override this.ExitArrayCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitArrayCreationExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitArrayCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ArrayCreationExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ArrayCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>arrayCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitBinaryOpExp">
      <MemberSignature Language="C#" Value="public virtual void ExitBinaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitBinaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/BinaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitBinaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitBinaryOpExp (context As ExpressionAntlrParser.BinaryOpExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitBinaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext -&gt; unit&#xA;override this.ExitBinaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitBinaryOpExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitBinaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.BinaryOpExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+BinaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>binaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitEveryRule">
      <MemberSignature Language="C#" Value="public virtual void ExitEveryRule (Antlr4.Runtime.ParserRuleContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitEveryRule(class Antlr4.Runtime.ParserRuleContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitEveryRule (context As ParserRuleContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitEveryRule : Antlr4.Runtime.ParserRuleContext -&gt; unit&#xA;override this.ExitEveryRule : Antlr4.Runtime.ParserRuleContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitEveryRule context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Antlr4.Runtime.Tree.IParseTreeListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Antlr4.Runtime.ParserRuleContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>A implementação padrão não faz nada.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ExitExpression">
      <MemberSignature Language="C#" Value="public virtual void ExitExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/ExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitExpression (context As ExpressionAntlrParser.ExpressionContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext -&gt; unit&#xA;override this.ExitExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitExpression context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.ExpressionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitFile">
      <MemberSignature Language="C#" Value="public virtual void ExitFile (AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitFile(class AdaptiveExpressions.parser.ExpressionAntlrParser/FileContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitFile(AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitFile (context As ExpressionAntlrParser.FileContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitFile : AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext -&gt; unit&#xA;override this.ExitFile : AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitFile context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitFile(AdaptiveExpressions.parser.ExpressionAntlrParser.FileContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FileContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.file" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitFuncInvokeExp">
      <MemberSignature Language="C#" Value="public virtual void ExitFuncInvokeExp (AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitFuncInvokeExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/FuncInvokeExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitFuncInvokeExp (context As ExpressionAntlrParser.FuncInvokeExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitFuncInvokeExp : AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext -&gt; unit&#xA;override this.ExitFuncInvokeExp : AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitFuncInvokeExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionAntlrParser.FuncInvokeExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+FuncInvokeExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>funcInvokeExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitIdAtom">
      <MemberSignature Language="C#" Value="public virtual void ExitIdAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitIdAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/IdAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitIdAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitIdAtom (context As ExpressionAntlrParser.IdAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitIdAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext -&gt; unit&#xA;override this.ExitIdAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitIdAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitIdAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.IdAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IdAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>idAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitIndexAccessExp">
      <MemberSignature Language="C#" Value="public virtual void ExitIndexAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitIndexAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/IndexAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitIndexAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitIndexAccessExp (context As ExpressionAntlrParser.IndexAccessExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitIndexAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext -&gt; unit&#xA;override this.ExitIndexAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitIndexAccessExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitIndexAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.IndexAccessExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+IndexAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>indexAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitJsonCreationExp">
      <MemberSignature Language="C#" Value="public virtual void ExitJsonCreationExp (AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitJsonCreationExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/JsonCreationExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitJsonCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitJsonCreationExp (context As ExpressionAntlrParser.JsonCreationExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitJsonCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext -&gt; unit&#xA;override this.ExitJsonCreationExp : AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitJsonCreationExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitJsonCreationExp(AdaptiveExpressions.parser.ExpressionAntlrParser.JsonCreationExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+JsonCreationExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>jsonCreationExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitKey">
      <MemberSignature Language="C#" Value="public virtual void ExitKey (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitKey(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitKey(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitKey (context As ExpressionAntlrParser.KeyContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitKey : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext -&gt; unit&#xA;override this.ExitKey : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitKey context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitKey(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.key" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitKeyValuePair">
      <MemberSignature Language="C#" Value="public virtual void ExitKeyValuePair (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitKeyValuePair(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitKeyValuePair(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitKeyValuePair (context As ExpressionAntlrParser.KeyValuePairContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitKeyValuePair : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext -&gt; unit&#xA;override this.ExitKeyValuePair : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitKeyValuePair context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitKeyValuePair(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePair" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitKeyValuePairList">
      <MemberSignature Language="C#" Value="public virtual void ExitKeyValuePairList (AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitKeyValuePairList(class AdaptiveExpressions.parser.ExpressionAntlrParser/KeyValuePairListContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitKeyValuePairList(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitKeyValuePairList (context As ExpressionAntlrParser.KeyValuePairListContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitKeyValuePairList : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext -&gt; unit&#xA;override this.ExitKeyValuePairList : AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitKeyValuePairList context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitKeyValuePairList(AdaptiveExpressions.parser.ExpressionAntlrParser.KeyValuePairListContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+KeyValuePairListContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.keyValuePairList" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitLambda">
      <MemberSignature Language="C#" Value="public virtual void ExitLambda (AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitLambda(class AdaptiveExpressions.parser.ExpressionAntlrParser/LambdaContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitLambda(AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitLambda (context As ExpressionAntlrParser.LambdaContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitLambda : AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext -&gt; unit&#xA;override this.ExitLambda : AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitLambda context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitLambda(AdaptiveExpressions.parser.ExpressionAntlrParser.LambdaContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+LambdaContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.lambda" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitMemberAccessExp">
      <MemberSignature Language="C#" Value="public virtual void ExitMemberAccessExp (AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitMemberAccessExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/MemberAccessExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitMemberAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitMemberAccessExp (context As ExpressionAntlrParser.MemberAccessExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitMemberAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext -&gt; unit&#xA;override this.ExitMemberAccessExp : AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitMemberAccessExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitMemberAccessExp(AdaptiveExpressions.parser.ExpressionAntlrParser.MemberAccessExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+MemberAccessExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>memberAccessExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitNumericAtom">
      <MemberSignature Language="C#" Value="public virtual void ExitNumericAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitNumericAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/NumericAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitNumericAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitNumericAtom (context As ExpressionAntlrParser.NumericAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitNumericAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext -&gt; unit&#xA;override this.ExitNumericAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitNumericAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitNumericAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.NumericAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+NumericAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>numericAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitParenthesisExp">
      <MemberSignature Language="C#" Value="public virtual void ExitParenthesisExp (AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitParenthesisExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/ParenthesisExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitParenthesisExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitParenthesisExp (context As ExpressionAntlrParser.ParenthesisExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitParenthesisExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext -&gt; unit&#xA;override this.ExitParenthesisExp : AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitParenthesisExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitParenthesisExp(AdaptiveExpressions.parser.ExpressionAntlrParser.ParenthesisExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+ParenthesisExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>parenthesisExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitPrimaryExp">
      <MemberSignature Language="C#" Value="public virtual void ExitPrimaryExp (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitPrimaryExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitPrimaryExp(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitPrimaryExp (context As ExpressionAntlrParser.PrimaryExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitPrimaryExp : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext -&gt; unit&#xA;override this.ExitPrimaryExp : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitPrimaryExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitPrimaryExp(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>primaryExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitPrimaryExpression">
      <MemberSignature Language="C#" Value="public virtual void ExitPrimaryExpression (AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitPrimaryExpression(class AdaptiveExpressions.parser.ExpressionAntlrParser/PrimaryExpressionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitPrimaryExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitPrimaryExpression (context As ExpressionAntlrParser.PrimaryExpressionContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitPrimaryExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext -&gt; unit&#xA;override this.ExitPrimaryExpression : AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitPrimaryExpression context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitPrimaryExpression(AdaptiveExpressions.parser.ExpressionAntlrParser.PrimaryExpressionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+PrimaryExpressionContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitStringAtom">
      <MemberSignature Language="C#" Value="public virtual void ExitStringAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStringAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitStringAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitStringAtom (context As ExpressionAntlrParser.StringAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitStringAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext -&gt; unit&#xA;override this.ExitStringAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitStringAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitStringAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>stringAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitStringInterpolation">
      <MemberSignature Language="C#" Value="public virtual void ExitStringInterpolation (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStringInterpolation(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitStringInterpolation(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitStringInterpolation (context As ExpressionAntlrParser.StringInterpolationContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitStringInterpolation : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext -&gt; unit&#xA;override this.ExitStringInterpolation : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitStringInterpolation context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitStringInterpolation(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.stringInterpolation" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitStringInterpolationAtom">
      <MemberSignature Language="C#" Value="public virtual void ExitStringInterpolationAtom (AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStringInterpolationAtom(class AdaptiveExpressions.parser.ExpressionAntlrParser/StringInterpolationAtomContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitStringInterpolationAtom (context As ExpressionAntlrParser.StringInterpolationAtomContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitStringInterpolationAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext -&gt; unit&#xA;override this.ExitStringInterpolationAtom : AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitStringInterpolationAtom context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionAntlrParser.StringInterpolationAtomContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+StringInterpolationAtomContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>stringInterpolationAtom</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.primaryExpression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitTextContent">
      <MemberSignature Language="C#" Value="public virtual void ExitTextContent (AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitTextContent(class AdaptiveExpressions.parser.ExpressionAntlrParser/TextContentContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitTextContent(AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitTextContent (context As ExpressionAntlrParser.TextContentContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitTextContent : AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext -&gt; unit&#xA;override this.ExitTextContent : AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitTextContent context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitTextContent(AdaptiveExpressions.parser.ExpressionAntlrParser.TextContentContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+TextContentContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida por <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.textContent" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitUnaryOpExp">
      <MemberSignature Language="C#" Value="public virtual void ExitUnaryOpExp (AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitUnaryOpExp(class AdaptiveExpressions.parser.ExpressionAntlrParser/UnaryOpExpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.ExitUnaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ExitUnaryOpExp (context As ExpressionAntlrParser.UnaryOpExpContext)" />
      <MemberSignature Language="F#" Value="abstract member ExitUnaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext -&gt; unit&#xA;override this.ExitUnaryOpExp : AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext -&gt; unit" Usage="expressionAntlrParserBaseListener.ExitUnaryOpExp context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.parser.IExpressionAntlrParserListener.ExitUnaryOpExp(AdaptiveExpressions.parser.ExpressionAntlrParser.UnaryOpExpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="AdaptiveExpressions.parser.ExpressionAntlrParser+UnaryOpExpContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">A árvore de análise.</param>
        <summary>Saia de uma árvore de análise produzida pelo <c>unaryOpExp</c> rotulado como alternativa em <see cref="M:AdaptiveExpressions.parser.ExpressionAntlrParser.expression" /> .
            <para>A implementação padrão não faz nada.</para></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitErrorNode">
      <MemberSignature Language="C#" Value="public virtual void VisitErrorNode (Antlr4.Runtime.Tree.IErrorNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitErrorNode(class Antlr4.Runtime.Tree.IErrorNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitErrorNode (node As IErrorNode)" />
      <MemberSignature Language="F#" Value="abstract member VisitErrorNode : Antlr4.Runtime.Tree.IErrorNode -&gt; unit&#xA;override this.VisitErrorNode : Antlr4.Runtime.Tree.IErrorNode -&gt; unit" Usage="expressionAntlrParserBaseListener.VisitErrorNode node" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Antlr4.Runtime.Tree.IParseTreeListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Antlr4.Runtime.Tree.IErrorNode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>A implementação padrão não faz nada.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitTerminal">
      <MemberSignature Language="C#" Value="public virtual void VisitTerminal (Antlr4.Runtime.Tree.ITerminalNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTerminal(class Antlr4.Runtime.Tree.ITerminalNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.parser.ExpressionAntlrParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTerminal (node As ITerminalNode)" />
      <MemberSignature Language="F#" Value="abstract member VisitTerminal : Antlr4.Runtime.Tree.ITerminalNode -&gt; unit&#xA;override this.VisitTerminal : Antlr4.Runtime.Tree.ITerminalNode -&gt; unit" Usage="expressionAntlrParserBaseListener.VisitTerminal node" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Antlr4.Runtime.Tree.IParseTreeListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Antlr4.Runtime.Tree.ITerminalNode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Antlr4.Runtime.Misc.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;Antlr4.Runtime.Misc.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>A implementação padrão não faz nada.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
