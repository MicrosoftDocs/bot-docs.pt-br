<Type Name="ExpressionEvaluator" FullName="AdaptiveExpressions.ExpressionEvaluator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1201b1401296e4e581565ef0d3a14dfd3810c5c4" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94598128" /></Metadata><TypeSignature Language="C#" Value="public class ExpressionEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionEvaluator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.ExpressionEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionEvaluator" />
  <TypeSignature Language="F#" Value="type ExpressionEvaluator = class" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Informações sobre como avaliar uma expressão.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionEvaluator (string type, AdaptiveExpressions.EvaluateExpressionDelegate evaluator, AdaptiveExpressions.ReturnType returnType = AdaptiveExpressions.ReturnType.Object, AdaptiveExpressions.ValidateExpressionDelegate validator = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string type, class AdaptiveExpressions.EvaluateExpressionDelegate evaluator, valuetype AdaptiveExpressions.ReturnType returnType, class AdaptiveExpressions.ValidateExpressionDelegate validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionEvaluator.#ctor(System.String,AdaptiveExpressions.EvaluateExpressionDelegate,AdaptiveExpressions.ReturnType,AdaptiveExpressions.ValidateExpressionDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As String, evaluator As EvaluateExpressionDelegate, Optional returnType As ReturnType = AdaptiveExpressions.ReturnType.Object, Optional validator As ValidateExpressionDelegate = Nothing)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.ExpressionEvaluator : string * AdaptiveExpressions.EvaluateExpressionDelegate * AdaptiveExpressions.ReturnType * AdaptiveExpressions.ValidateExpressionDelegate -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="new AdaptiveExpressions.ExpressionEvaluator (type, evaluator, returnType, validator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="evaluator" Type="AdaptiveExpressions.EvaluateExpressionDelegate" />
        <Parameter Name="returnType" Type="AdaptiveExpressions.ReturnType" />
        <Parameter Name="validator" Type="AdaptiveExpressions.ValidateExpressionDelegate" />
      </Parameters>
      <Docs>
        <param name="type">Tipo de expressão.</param>
        <param name="evaluator">Delegate para avaliar uma expressão.</param>
        <param name="returnType">Tipo esperado da avaliação.</param>
        <param name="validator">Validação estática da expressão.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.ExpressionEvaluator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negation">
      <MemberSignature Language="C#" Value="public AdaptiveExpressions.ExpressionEvaluator Negation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AdaptiveExpressions.ExpressionEvaluator Negation" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.ExpressionEvaluator.Negation" />
      <MemberSignature Language="VB.NET" Value="Public Property Negation As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="member this.Negation : AdaptiveExpressions.ExpressionEvaluator with get, set" Usage="AdaptiveExpressions.ExpressionEvaluator.Negation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o avaliador que é uma negação deste.</summary>
        <value>O avaliador que é uma negação deste.</value>
        <remarks>Ao fazer isso <see cref="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)" /> , as negações substituirão uma expressão e removerão não pai.
Por padrão, nenhuma negação é definida e não o pai permanecerá.
Se uma negação for definida, isso será definido automaticamente como sua negação.
Se um avaliador for sua própria negação, a negação será passada para os filhos.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public AdaptiveExpressions.ReturnType ReturnType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AdaptiveExpressions.ReturnType ReturnType" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.ExpressionEvaluator.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Property ReturnType As ReturnType" />
      <MemberSignature Language="F#" Value="member this.ReturnType : AdaptiveExpressions.ReturnType with get, set" Usage="AdaptiveExpressions.ExpressionEvaluator.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ReturnType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o tipo de retorno da expressão.</summary>
        <value>Tipo esperado avaliando a expressão.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionEvaluator.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expressionEvaluator.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o objeto atual.</summary>
        <returns>O valor da cadeia de caracteres representa a assinatura da função.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEvaluate">
      <MemberSignature Language="C#" Value="public (object,string) TryEvaluate (AdaptiveExpressions.Expression expression, AdaptiveExpressions.Memory.IMemory state, AdaptiveExpressions.Options options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;object, string&gt; TryEvaluate(class AdaptiveExpressions.Expression expression, class AdaptiveExpressions.Memory.IMemory state, class AdaptiveExpressions.Options options) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionEvaluator.TryEvaluate(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEvaluate (expression As Expression, state As IMemory, options As Options) As ValueTuple(Of Object, String)" />
      <MemberSignature Language="F#" Value="member this.TryEvaluate : AdaptiveExpressions.Expression * AdaptiveExpressions.Memory.IMemory * AdaptiveExpressions.Options -&gt; ValueTuple&lt;obj, string&gt;" Usage="expressionEvaluator.TryEvaluate (expression, state, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Object,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "value", "error" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "value", "error" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="state" Type="AdaptiveExpressions.Memory.IMemory" />
        <Parameter Name="options" Type="AdaptiveExpressions.Options" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão para avaliar.</param>
        <param name="state">Informações de estado global.</param>
        <param name="options">Opções usadas na avaliação.</param>
        <summary>Avaliar uma expressão.</summary>
        <returns>Valor e cadeia de caracteres de erro que não são nulos se houver um erro.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.ExpressionEvaluator.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As String" />
      <MemberSignature Language="F#" Value="member this.Type : string" Usage="AdaptiveExpressions.ExpressionEvaluator.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tipo de expressão para o avaliador.</summary>
        <value>O tipo de expressão de <see cref="T:AdaptiveExpressions.ExpressionType" /> para funções internas ou uma cadeia de caracteres exclusiva para funções personalizadas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateExpression">
      <MemberSignature Language="C#" Value="public void ValidateExpression (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateExpression(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionEvaluator.ValidateExpression(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateExpression (expression As Expression)" />
      <MemberSignature Language="F#" Value="member this.ValidateExpression : AdaptiveExpressions.Expression -&gt; unit" Usage="expressionEvaluator.ValidateExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Validar uma expressão.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
