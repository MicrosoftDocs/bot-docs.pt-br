<Type Name="FunctionUtils" FullName="AdaptiveExpressions.FunctionUtils">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9eec75c426a172add2564fa37e5535efacb794b" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94597983" /></Metadata><TypeSignature Language="C#" Value="public static class FunctionUtils" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FunctionUtils extends System.Object" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.FunctionUtils" />
  <TypeSignature Language="VB.NET" Value="Public Class FunctionUtils" />
  <TypeSignature Language="F#" Value="type FunctionUtils = class" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Funções de utilitário para expressões adaptáveis.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate Apply (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate Apply(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.Apply(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Apply (function As Func(Of IReadOnlyList(Of Object), Object), Optional verify As FunctionUtils.VerifyExpression = Nothing) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member Apply : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.FunctionUtils.Apply (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Função a ser aplicada.</param>
        <param name="verify">Função para verificar a validade de cada ARG.</param>
        <summary>Gere um delegado de expressão que aplique a função depois de verificar todos os filhos.</summary>
        <returns>Delegado para avaliar uma expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySequence">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplySequence (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplySequence(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ApplySequence(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplySequence (function As Func(Of IReadOnlyList(Of Object), Object), Optional verify As FunctionUtils.VerifyExpression = Nothing) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplySequence : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.FunctionUtils.ApplySequence (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Função a ser aplicada.</param>
        <param name="verify">Função para verificar a validade de cada ARG.</param>
        <summary>Gere um delegado de expressão que aplique a função no valor acumulado depois de verificar todos os filhos.</summary>
        <returns>Delegado para avaliar uma expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySequenceWithError">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplySequenceWithError (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,ValueTuple&lt;object,string&gt;&gt; function, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplySequenceWithError(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, valuetype System.ValueTuple`2&lt;object, string&gt;&gt; function, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ApplySequenceWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplySequenceWithError (function As Func(Of IReadOnlyList(Of Object), ValueTuple(Of Object, String)), Optional verify As FunctionUtils.VerifyExpression = Nothing) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplySequenceWithError : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, ValueTuple&lt;obj, string&gt;&gt; * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.FunctionUtils.ApplySequenceWithError (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.ValueTuple&lt;System.Object,System.String&gt;&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Função a ser aplicada.</param>
        <param name="verify">Função para verificar a validade de cada ARG.</param>
        <summary>Gere um delegado de expressão que aplique a função no valor acumulado depois de verificar todos os filhos.</summary>
        <returns>Delegado para avaliar uma expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyWithError">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithError (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,ValueTuple&lt;object,string&gt;&gt; function, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithError(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, valuetype System.ValueTuple`2&lt;object, string&gt;&gt; function, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ApplyWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplyWithError (function As Func(Of IReadOnlyList(Of Object), ValueTuple(Of Object, String)), Optional verify As FunctionUtils.VerifyExpression = Nothing) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplyWithError : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, ValueTuple&lt;obj, string&gt;&gt; * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.FunctionUtils.ApplyWithError (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.ValueTuple&lt;System.Object,System.String&gt;&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Função a ser aplicada.</param>
        <param name="verify">Função para verificar a validade de cada ARG.</param>
        <summary>Gere um delegado de expressão que aplique a função depois de verificar todos os filhos.</summary>
        <returns>Delegado para avaliar uma expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyWithOptionsAndError">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithOptionsAndError (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,AdaptiveExpressions.Options,ValueTuple&lt;object,string&gt;&gt; function, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithOptionsAndError(class System.Func`3&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, class AdaptiveExpressions.Options, valuetype System.ValueTuple`2&lt;object, string&gt;&gt; function, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ApplyWithOptionsAndError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},AdaptiveExpressions.Options,System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplyWithOptionsAndError (function As Func(Of IReadOnlyList(Of Object), Options, ValueTuple(Of Object, String)), Optional verify As FunctionUtils.VerifyExpression = Nothing) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplyWithOptionsAndError : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, AdaptiveExpressions.Options, ValueTuple&lt;obj, string&gt;&gt; * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.FunctionUtils.ApplyWithOptionsAndError (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,AdaptiveExpressions.Options,System.ValueTuple&lt;System.Object,System.String&gt;&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Função a ser aplicada.</param>
        <param name="verify">Função para verificar a validade de cada ARG.</param>
        <summary>Gere um delegado de expressão que aplique a função depois de verificar todos os filhos.</summary>
        <returns>Delegado para avaliar uma expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDateTimeFormat">
      <MemberSignature Language="C#" Value="public static readonly string DefaultDateTimeFormat;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultDateTimeFormat" />
      <MemberSignature Language="DocId" Value="F:AdaptiveExpressions.FunctionUtils.DefaultDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultDateTimeFormat As String " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultDateTimeFormat : string" Usage="AdaptiveExpressions.FunctionUtils.DefaultDateTimeFormat" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A cadeia de caracteres de formato de data e hora padrão.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateChildren">
      <MemberSignature Language="C#" Value="public static (System.Collections.Generic.IReadOnlyList&lt;object&gt;,string) EvaluateChildren (AdaptiveExpressions.Expression expression, AdaptiveExpressions.Memory.IMemory state, AdaptiveExpressions.Options options, AdaptiveExpressions.FunctionUtils.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, string&gt; EvaluateChildren(class AdaptiveExpressions.Expression expression, class AdaptiveExpressions.Memory.IMemory state, class AdaptiveExpressions.Options options, class AdaptiveExpressions.FunctionUtils/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.EvaluateChildren(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options,AdaptiveExpressions.FunctionUtils.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EvaluateChildren (expression As Expression, state As IMemory, options As Options, Optional verify As FunctionUtils.VerifyExpression = Nothing) As ValueTuple(Of IReadOnlyList(Of Object), String)" />
      <MemberSignature Language="F#" Value="static member EvaluateChildren : AdaptiveExpressions.Expression * AdaptiveExpressions.Memory.IMemory * AdaptiveExpressions.Options * AdaptiveExpressions.FunctionUtils.VerifyExpression -&gt; ValueTuple&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, string&gt;" Usage="AdaptiveExpressions.FunctionUtils.EvaluateChildren (expression, state, options, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { null, "error" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { null, "error" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="state" Type="AdaptiveExpressions.Memory.IMemory" />
        <Parameter Name="options" Type="AdaptiveExpressions.Options" />
        <Parameter Name="verify" Type="AdaptiveExpressions.FunctionUtils+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão com filhos.</param>
        <param name="state">Estado global.</param>
        <param name="options">Opções usadas na avaliação.</param>
        <param name="verify">Função opcional para verificar o resultado de cada filho.</param>
        <summary>Avalie a expressão Children e as retorne.</summary>
        <returns>Lista de valores filho ou mensagem de erro.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAccumulatePath">
      <MemberSignature Language="C#" Value="public static (string,AdaptiveExpressions.Expression,string) TryAccumulatePath (AdaptiveExpressions.Expression expression, AdaptiveExpressions.Memory.IMemory state, AdaptiveExpressions.Options options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`3&lt;string, class AdaptiveExpressions.Expression, string&gt; TryAccumulatePath(class AdaptiveExpressions.Expression expression, class AdaptiveExpressions.Memory.IMemory state, class AdaptiveExpressions.Options options) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.TryAccumulatePath(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAccumulatePath (expression As Expression, state As IMemory, options As Options) As ValueTuple(Of String, Expression, String)" />
      <MemberSignature Language="F#" Value="static member TryAccumulatePath : AdaptiveExpressions.Expression * AdaptiveExpressions.Memory.IMemory * AdaptiveExpressions.Options -&gt; ValueTuple&lt;string, AdaptiveExpressions.Expression, string&gt;" Usage="AdaptiveExpressions.FunctionUtils.TryAccumulatePath (expression, state, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.String,AdaptiveExpressions.Expression,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "path", "left", "error" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "path", "left", "error" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="state" Type="AdaptiveExpressions.Memory.IMemory" />
        <Parameter Name="options" Type="AdaptiveExpressions.Options" />
      </Parameters>
      <Docs>
        <param name="expression">expressão.</param>
        <param name="state">escopo.</param>
        <param name="options">Opções usadas na avaliação.</param>
        <summary>Tente acumular o caminho de um acessador ou elemento, da direita para a esquerda.</summary>
        <returns>Retorna o caminho acumulado e a expressão deixada não pode ser acumulada.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseList">
      <MemberSignature Language="C#" Value="public static bool TryParseList (object value, out System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseList(object value, [out] class System.Collections.IList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.TryParseList(System.Object,System.Collections.IList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseList (value As Object, ByRef list As IList) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseList : obj * IList -&gt; bool" Usage="AdaptiveExpressions.FunctionUtils.TryParseList (value, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="list" Type="System.Collections.IList" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser forçado.</param>
        <param name="list">IList se encontrada.</param>
        <summary>Tente forçar o objeto a IList.</summary>
        <returns>true se for encontrado IList.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateArityAndAnyType">
      <MemberSignature Language="C#" Value="public static void ValidateArityAndAnyType (AdaptiveExpressions.Expression expression, int minArity, int maxArity, AdaptiveExpressions.ReturnType returnType = AdaptiveExpressions.ReturnType.Object);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateArityAndAnyType(class AdaptiveExpressions.Expression expression, int32 minArity, int32 maxArity, valuetype AdaptiveExpressions.ReturnType returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateArityAndAnyType(AdaptiveExpressions.Expression,System.Int32,System.Int32,AdaptiveExpressions.ReturnType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateArityAndAnyType (expression As Expression, minArity As Integer, maxArity As Integer, Optional returnType As ReturnType = AdaptiveExpressions.ReturnType.Object)" />
      <MemberSignature Language="F#" Value="static member ValidateArityAndAnyType : AdaptiveExpressions.Expression * int * int * AdaptiveExpressions.ReturnType -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateArityAndAnyType (expression, minArity, maxArity, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="minArity" Type="System.Int32" />
        <Parameter Name="maxArity" Type="System.Int32" />
        <Parameter Name="returnType" Type="AdaptiveExpressions.ReturnType" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <param name="minArity">Número mínimo de filhos.</param>
        <param name="maxArity">Número máximo de filhos.</param>
        <param name="returnType">Tipos de retorno permitidos para filhos.</param>
        <summary>Valide se a expressão tem um determinado número de filhos de qualquer um dos tipos com suporte.</summary>
        <remarks>Se um filho tiver um tipo de retorno de objeto, a validação ocorrerá em tempo de execução.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateAtLeastOne">
      <MemberSignature Language="C#" Value="public static void ValidateAtLeastOne (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateAtLeastOne(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateAtLeastOne(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateAtLeastOne (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateAtLeastOne : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateAtLeastOne expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide pelo menos um argumento de qualquer tipo.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinary">
      <MemberSignature Language="C#" Value="public static void ValidateBinary (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinary(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateBinary(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinary (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinary : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateBinary expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há dois filhos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinaryNumber">
      <MemberSignature Language="C#" Value="public static void ValidateBinaryNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinaryNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateBinaryNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinaryNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinaryNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateBinaryNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide dois argumentos numéricos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinaryNumberOrString">
      <MemberSignature Language="C#" Value="public static void ValidateBinaryNumberOrString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinaryNumberOrString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateBinaryNumberOrString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinaryNumberOrString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinaryNumberOrString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateBinaryNumberOrString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há dois argumentos numéricos ou de cadeia de caracteres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNumber">
      <MemberSignature Language="C#" Value="public static void ValidateNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide 1 ou mais argumentos numéricos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrder">
      <MemberSignature Language="C#" Value="public static void ValidateOrder (AdaptiveExpressions.Expression expression, AdaptiveExpressions.ReturnType[] optional, params AdaptiveExpressions.ReturnType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateOrder(class AdaptiveExpressions.Expression expression, valuetype AdaptiveExpressions.ReturnType[] optional, valuetype AdaptiveExpressions.ReturnType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateOrder(AdaptiveExpressions.Expression,AdaptiveExpressions.ReturnType[],AdaptiveExpressions.ReturnType[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateOrder (expression As Expression, optional As ReturnType(), ParamArray types As ReturnType())" />
      <MemberSignature Language="F#" Value="static member ValidateOrder : AdaptiveExpressions.Expression * AdaptiveExpressions.ReturnType[] * AdaptiveExpressions.ReturnType[] -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateOrder (expression, optional, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="optional" Type="AdaptiveExpressions.ReturnType[]" />
        <Parameter Name="types" Type="AdaptiveExpressions.ReturnType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <param name="optional">Tipos opcionais na ordem.</param>
        <param name="types">Tipos esperados na ordem.</param>
        <summary>Valide o número e o tipo de argumentos para uma função.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateString">
      <MemberSignature Language="C#" Value="public static void ValidateString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide 1 ou mais argumentos de cadeia de caracteres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTwoOrMoreThanTwoNumbers">
      <MemberSignature Language="C#" Value="public static void ValidateTwoOrMoreThanTwoNumbers (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateTwoOrMoreThanTwoNumbers(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateTwoOrMoreThanTwoNumbers(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateTwoOrMoreThanTwoNumbers (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateTwoOrMoreThanTwoNumbers : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateTwoOrMoreThanTwoNumbers expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide 2 ou mais de 2 argumentos numéricos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnary">
      <MemberSignature Language="C#" Value="public static void ValidateUnary (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnary(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnary(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnary (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnary : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnary expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há um único argumento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryBoolean">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryBoolean (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryBoolean(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryBoolean(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryBoolean (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryBoolean : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnaryBoolean expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há um único argumento booliano.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryNumber">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnaryNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há um único argumento de número.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryOrBinaryNumber">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryOrBinaryNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryOrBinaryNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryOrBinaryNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryOrBinaryNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide 1 ou 2 argumentos numéricos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryOrBinaryString">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryOrBinaryString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryOrBinaryString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryOrBinaryString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryOrBinaryString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnaryOrBinaryString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide um ou dois argumentos de cadeia de caracteres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryString">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.ValidateUnaryString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.FunctionUtils.ValidateUnaryString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser validada.</param>
        <summary>Valide se há um único argumento de cadeia de caracteres.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyContainer">
      <MemberSignature Language="C#" Value="public static string VerifyContainer (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyContainer(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyContainer(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyContainer (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyContainer : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyContainer (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>O valor de verificação contém elementos.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyInteger">
      <MemberSignature Language="C#" Value="public static string VerifyInteger (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyInteger(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyInteger(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyInteger (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyInteger : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyInteger (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é um inteiro.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyList">
      <MemberSignature Language="C#" Value="public static string VerifyList (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyList(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyList(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyList (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyList : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyList (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>O valor de verificação contém elementos.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNotNull">
      <MemberSignature Language="C#" Value="public static string VerifyNotNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNotNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNotNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNotNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNotNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNotNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor não é nulo.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumber">
      <MemberSignature Language="C#" Value="public static string VerifyNumber (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumber(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumber (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumber : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNumber (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é numérico.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumberOrString">
      <MemberSignature Language="C#" Value="public static string VerifyNumberOrString (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumberOrString(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNumberOrString(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumberOrString (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumberOrString : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNumberOrString (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é um número ou uma cadeia de caracteres.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumberOrStringOrNull">
      <MemberSignature Language="C#" Value="public static string VerifyNumberOrStringOrNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumberOrStringOrNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNumberOrStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumberOrStringOrNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumberOrStringOrNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNumberOrStringOrNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verify Value é um número ou uma cadeia de caracteres ou NULL.</summary>
        <returns>Erro.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumericList">
      <MemberSignature Language="C#" Value="public static string VerifyNumericList (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumericList(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNumericList(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumericList (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumericList : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNumericList (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é uma lista numérica.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumericListOrNumber">
      <MemberSignature Language="C#" Value="public static string VerifyNumericListOrNumber (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumericListOrNumber(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyNumericListOrNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumericListOrNumber (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumericListOrNumber : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyNumericListOrNumber (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é uma lista numérica ou um valor numérico.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public static string VerifyString (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyString(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyString(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyString (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyString : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyString (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <param name="expression">Expressão que levou ao valor.</param>
        <param name="number">Nenhuma função.</param>
        <summary>Verifique se o valor é uma cadeia de caracteres.</summary>
        <returns>Erro ou nulo se for válido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyStringOrNull">
      <MemberSignature Language="C#" Value="public static string VerifyStringOrNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyStringOrNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.FunctionUtils.VerifyStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyStringOrNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyStringOrNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.FunctionUtils.VerifyStringOrNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">do Service Fabric.</param>
        <param name="expression">expressão.</param>
        <param name="number">.</param>
        <summary>Verifique se um objeto não é uma cadeia de caracteres nem NULL.</summary>
        <returns>mensagem de erro.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
