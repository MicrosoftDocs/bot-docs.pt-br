<Type Name="Extensions" FullName="AdaptiveExpressions.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8af3d8c7531c44dcca709764aaf60d59bee35182" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94598018" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Métodos de extensão para detecção ou teste de valor de vários tipos.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DisjunctiveNormalForm">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.Expression DisjunctiveNormalForm (this AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.Expression DisjunctiveNormalForm(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Extensions.DisjunctiveNormalForm(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DisjunctiveNormalForm (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member DisjunctiveNormalForm : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Expression" Usage="AdaptiveExpressions.Extensions.DisjunctiveNormalForm expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser reescrita.</param>
        <summary>Reescreva a expressão no formato normal disjunctive.</summary>
        <returns>Expressão normalizada.</returns>
        <remarks>Reescreve para uma expressão simples ou uma disjunção de conconjuntos ou expressões simples, sem ser empurrado para as folhas.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInteger">
      <MemberSignature Language="C#" Value="public static bool IsInteger (this object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInteger(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Extensions.IsInteger(System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsInteger (value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInteger : obj -&gt; bool" Usage="AdaptiveExpressions.Extensions.IsInteger value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <summary>Teste um objeto para ver se ele é um tipo inteiro.</summary>
        <returns>True se o tipo numérico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (this object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Extensions.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNumber (value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNumber : obj -&gt; bool" Usage="AdaptiveExpressions.Extensions.IsNumber value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser verificado.</param>
        <summary>Teste um objeto para ver se ele é um tipo numérico.</summary>
        <returns>True se o tipo numérico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushDownNot">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.Expression PushDownNot (this AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.Expression PushDownNot(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PushDownNot (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member PushDownNot : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Expression" Usage="AdaptiveExpressions.Extensions.PushDownNot expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="expression">Expressão a ser reescrita.</param>
        <summary>Reescreva a expressão enviando-a por push, não para as folhas.</summary>
        <returns>Expressão reescrita.</returns>
        <remarks>Enviar para baixo não para as folhas, se possível.  Para e/ou/não isso usa a lei da desmorgan e reescreve as comparações.
Você pode definir seu próprio comportamento definindo <see cref="P:AdaptiveExpressions.ExpressionEvaluator.Negation" /> para o avaliador negado.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomNext">
      <MemberSignature Language="C#" Value="public static int RandomNext (this AdaptiveExpressions.Memory.IMemory memory, int min, int max, int? seed = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 RandomNext(class AdaptiveExpressions.Memory.IMemory memory, int32 min, int32 max, valuetype System.Nullable`1&lt;int32&gt; seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Extensions.RandomNext(AdaptiveExpressions.Memory.IMemory,System.Int32,System.Int32,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RandomNext (memory As IMemory, min As Integer, max As Integer, Optional seed As Nullable(Of Integer) = Nothing) As Integer" />
      <MemberSignature Language="F#" Value="static member RandomNext : AdaptiveExpressions.Memory.IMemory * int * int * Nullable&lt;int&gt; -&gt; int" Usage="AdaptiveExpressions.Extensions.RandomNext (memory, min, max, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="AdaptiveExpressions.Memory.IMemory" RefType="this" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">estado da memória.</param>
        <param name="min">O limite inferior inclusivo do número aleatório retornado.</param>
        <param name="max">O limite superior exclusivo do número aleatório retornado. Max deve ser maior ou igual ao mín.</param>
        <param name="seed">semente do usuário.</param>
        <summary>Semente e valor aleatórios do gerador de propriedades.
Se o valor não for nulo, o resultado de valor aleatório fictício será: min + (valor% (max-min)).
Caso contrário, se Seed não for NULL, a semente de Random seria corrigida.</summary>
        <returns>Semente e valor aleatórios.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
