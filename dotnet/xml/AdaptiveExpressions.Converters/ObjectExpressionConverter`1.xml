<Type Name="ObjectExpressionConverter&lt;T&gt;" FullName="AdaptiveExpressions.Converters.ObjectExpressionConverter&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2843fb80266ff3c7510cac9ef1301767823e551" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94598228" /></Metadata><TypeSignature Language="C#" Value="public class ObjectExpressionConverter&lt;T&gt; : Newtonsoft.Json.JsonConverter&lt;AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectExpressionConverter`1&lt;T&gt; extends Newtonsoft.Json.JsonConverter`1&lt;class AdaptiveExpressions.Properties.ObjectExpression`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Converters.ObjectExpressionConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectExpressionConverter(Of T)&#xA;Inherits JsonConverter(Of ObjectExpression(Of T))" />
  <TypeSignature Language="F#" Value="type ObjectExpressionConverter&lt;'T&gt; = class&#xA;    inherit JsonConverter&lt;ObjectExpression&lt;'T&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Newtonsoft.Json.JsonConverter&lt;AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">O tipo de propriedade a ser construído.</typeparam>
    <summary>Conversor que permite que JSON seja expressão para objeto ou objeto estático.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="AdaptiveExpressions.Converters.ObjectExpressionConverter&lt;'T&gt;.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se este conversor pode ler JSON.</summary>
        <value>true se este conversor puder ler JSON; caso contrário, false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadJson">
      <MemberSignature Language="C#" Value="public override AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt; ReadJson (Newtonsoft.Json.JsonReader reader, Type objectType, AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt; existingValue, bool hasExistingValue, Newtonsoft.Json.JsonSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class AdaptiveExpressions.Properties.ObjectExpression`1&lt;!T&gt; ReadJson(class Newtonsoft.Json.JsonReader reader, class System.Type objectType, class AdaptiveExpressions.Properties.ObjectExpression`1&lt;!T&gt; existingValue, bool hasExistingValue, class Newtonsoft.Json.JsonSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.ObjectExpression{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadJson (reader As JsonReader, objectType As Type, existingValue As ObjectExpression(Of T), hasExistingValue As Boolean, serializer As JsonSerializer) As ObjectExpression(Of T)" />
      <MemberSignature Language="F#" Value="override this.ReadJson : Newtonsoft.Json.JsonReader * Type * AdaptiveExpressions.Properties.ObjectExpression&lt;'T&gt; * bool * Newtonsoft.Json.JsonSerializer -&gt; AdaptiveExpressions.Properties.ObjectExpression&lt;'T&gt;" Usage="objectExpressionConverter.ReadJson (reader, objectType, existingValue, hasExistingValue, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="existingValue" Type="AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;" />
        <Parameter Name="hasExistingValue" Type="System.Boolean" />
        <Parameter Name="serializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="reader">O Newtonsoft.Json.Jsde leitura para ler.</param>
        <param name="objectType">Tipo do objeto.</param>
        <param name="existingValue">O valor existente do objeto que está sendo lido.</param>
        <param name="hasExistingValue">Um valor booliano que indica se há um valor existente do objeto a ser lido.</param>
        <param name="serializer">O serializador de chamada.</param>
        <summary>Lê uma representação JSON do objeto.</summary>
        <returns>Uma instância de.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteJson">
      <MemberSignature Language="C#" Value="public override void WriteJson (Newtonsoft.Json.JsonWriter writer, AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt; value, Newtonsoft.Json.JsonSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteJson(class Newtonsoft.Json.JsonWriter writer, class AdaptiveExpressions.Properties.ObjectExpression`1&lt;!T&gt; value, class Newtonsoft.Json.JsonSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.ObjectExpressionConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.ObjectExpression{`0},Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteJson (writer As JsonWriter, value As ObjectExpression(Of T), serializer As JsonSerializer)" />
      <MemberSignature Language="F#" Value="override this.WriteJson : Newtonsoft.Json.JsonWriter * AdaptiveExpressions.Properties.ObjectExpression&lt;'T&gt; * Newtonsoft.Json.JsonSerializer -&gt; unit" Usage="objectExpressionConverter.WriteJson (writer, value, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="Newtonsoft.Json.JsonWriter" />
        <Parameter Name="value" Type="AdaptiveExpressions.Properties.ObjectExpression&lt;T&gt;" />
        <Parameter Name="serializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="writer">O Newtonsoft.Json.Jsonwriter para gravar.</param>
        <param name="value">O valor.</param>
        <param name="serializer">O serializador de chamada.</param>
        <summary>Grava uma representação JSON do objeto.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
