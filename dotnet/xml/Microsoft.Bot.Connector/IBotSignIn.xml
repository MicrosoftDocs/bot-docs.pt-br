<Type Name="IBotSignIn" FullName="Microsoft.Bot.Connector.IBotSignIn">
  <Metadata><Meta Name="ms.openlocfilehash" Value="928f07f53a9ee3244923a0f89d7ffc34141da779" /><Meta Name="ms.sourcegitcommit" Value="d974a0b93f13db7720fcb332f37bf8a404d77e43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/20/2020" /><Meta Name="ms.locfileid" Value="93150171" /></Metadata><TypeSignature Language="C#" Value="public interface IBotSignIn" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBotSignIn" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Connector.IBotSignIn" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBotSignIn" />
  <TypeSignature Language="F#" Value="type IBotSignIn = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
    <AssemblyVersion>4.9.2.0</AssemblyVersion>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Operações de BotSignIn.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSignInUrlWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;string&gt;&gt; GetSignInUrlWithHttpMessagesAsync (string state, string codeChallenge = default, string emulatorUrl = default, string finalRedirect = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;string&gt;&gt; GetSignInUrlWithHttpMessagesAsync(string state, string codeChallenge, string emulatorUrl, string finalRedirect, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.IBotSignIn.GetSignInUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSignInUrlWithHttpMessagesAsync (state As String, Optional codeChallenge As String = Nothing, Optional emulatorUrl As String = Nothing, Optional finalRedirect As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of HttpOperationResponse(Of String))" />
      <MemberSignature Language="F#" Value="abstract member GetSignInUrlWithHttpMessagesAsync : string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;string&gt;&gt;" Usage="iBotSignIn.GetSignInUrlWithHttpMessagesAsync (state, codeChallenge, emulatorUrl, finalRedirect, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.String" />
        <Parameter Name="codeChallenge" Type="System.String" />
        <Parameter Name="emulatorUrl" Type="System.String" />
        <Parameter Name="finalRedirect" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="state" />
        <param name="codeChallenge" />
        <param name="emulatorUrl" />
        <param name="finalRedirect" />
        <param name="customHeaders">Os cabeçalhos que serão adicionados à solicitação.</param>
        <param name="cancellationToken">O token de cancelamento.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rest.HttpOperationException">Gerado quando a operação retornou um código de status inválido</exception>
        <exception cref="T:Microsoft.Rest.SerializationException">Gerado quando não é possível desserializar a resposta</exception>
        <exception cref="T:Microsoft.Rest.ValidationException">Gerado quando um parâmetro obrigatório é nulo</exception>
      </Docs>
    </Member>
  </Members>
</Type>
