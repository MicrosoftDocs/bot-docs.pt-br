<Type Name="Extensions" FullName="Microsoft.Bot.Builder.LanguageGeneration.Extensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bec466a0fa4e79f9530074a4cac6b2abf3fa0c65" /><Meta Name="ms.sourcegitcommit" Value="d974a0b93f13db7720fcb332f37bf8a404d77e43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/20/2020" /><Meta Name="ms.locfileid" Value="93152125" /></Metadata><TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.LanguageGeneration.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Métodos de extensão para LG.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.LanguageGeneration.Extensions.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Escape (text As String) As String" />
      <MemberSignature Language="F#" Value="static member Escape : string -&gt; string" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.Escape text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text">Texto de entrada.</param>
        <summary>Escape \ de texto.</summary>
        <returns>Texto com escape.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeRegex">
      <MemberSignature Language="C#" Value="public static readonly System.Text.RegularExpressions.Regex EscapeRegex;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Text.RegularExpressions.Regex EscapeRegex" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Bot.Builder.LanguageGeneration.Extensions.EscapeRegex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly EscapeRegex As Regex " />
      <MemberSignature Language="F#" Value=" staticval mutable EscapeRegex : System.Text.RegularExpressions.Regex" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.EscapeRegex" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Regex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Expressão regular para correspondência de caracteres de escape.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixErrorMessage">
      <MemberSignature Language="C#" Value="public static string GetPrefixErrorMessage (this Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.NormalTemplateStringContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPrefixErrorMessage(class Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser/NormalTemplateStringContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.LanguageGeneration.Extensions.GetPrefixErrorMessage(Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.NormalTemplateStringContext)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPrefixErrorMessage (context As LGTemplateParser.NormalTemplateStringContext) As String" />
      <MemberSignature Language="F#" Value="static member GetPrefixErrorMessage : Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.NormalTemplateStringContext -&gt; string" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.GetPrefixErrorMessage context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser+NormalTemplateStringContext" RefType="this" />
      </Parameters>
      <Docs>
        <param name="context">Contexto do modelo. normal.</param>
        <summary>Obter mensagem de erro de prefixo do contexto do modelo. normal.</summary>
        <returns>Mensagem de erro de prefixo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPureExpression">
      <MemberSignature Language="C#" Value="public static bool IsPureExpression (this Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.KeyValueStructureValueContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPureExpression(class Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser/KeyValueStructureValueContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.LanguageGeneration.Extensions.IsPureExpression(Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.KeyValueStructureValueContext)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPureExpression (context As LGTemplateParser.KeyValueStructureValueContext) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPureExpression : Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser.KeyValueStructureValueContext -&gt; bool" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.IsPureExpression context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.LanguageGeneration.LGTemplateParser+KeyValueStructureValueContext" RefType="this" />
      </Parameters>
      <Docs>
        <param name="context">Contexto do valor da estrutura de valor da chave.</param>
        <summary>Se um valor for uma expressão pura.</summary>
        <returns>É uma expressão pura ou não.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizePath">
      <MemberSignature Language="C#" Value="public static string NormalizePath (this string ambigiousPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string NormalizePath(string ambigiousPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.LanguageGeneration.Extensions.NormalizePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function NormalizePath (ambigiousPath As String) As String" />
      <MemberSignature Language="F#" Value="static member NormalizePath : string -&gt; string" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.NormalizePath ambigiousPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ambigiousPath" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="ambigiousPath">Caminho criado.</param>
        <summary>Normalize o caminho criado para o caminho do sistema operacional.</summary>
        <returns>Caminho expresso como caminho do sistema operacional.</returns>
        <remarks>o caminho é de conteúdo criado que não sabe em qual sistema operacional ele está sendo executado.
Esse método trata/e \ ambos como separadores, independentemente do sistema operacional, para Windows que significa/- &gt; \ e para Linux/Mac \- &gt; /.
Isso permite que o autor use.. /foo.LG ou.. \foo.LG como equivalentes para importação.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExpression">
      <MemberSignature Language="C#" Value="public static string TrimExpression (this string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TrimExpression(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.LanguageGeneration.Extensions.TrimExpression(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimExpression (expression As String) As String" />
      <MemberSignature Language="F#" Value="static member TrimExpression : string -&gt; string" Usage="Microsoft.Bot.Builder.LanguageGeneration.Extensions.TrimExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.LanguageGeneration</AssemblyName>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="expression">Cadeia de caracteres de expressão de entrada.</param>
        <summary>expressão Trim. $ {ABC} = &gt; ABC, $ {a = = {} } = &gt; a = = {} .</summary>
        <returns>Cadeia de caracteres de expressão pura.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
