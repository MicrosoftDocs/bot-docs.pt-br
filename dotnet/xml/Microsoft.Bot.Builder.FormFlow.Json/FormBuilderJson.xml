<Type Name="FormBuilderJson" FullName="Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson">
  <Metadata><Meta Name="ms.openlocfilehash" Value="496cba9777d914abc9efcb994112c811557aa0c0" /><Meta Name="ms.sourcegitcommit" Value="ac3a7ee8979fc942f9d7420b2f6845c726b6661a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/02/2020" /><Meta Name="ms.locfileid" Value="93149604" /></Metadata><TypeSignature Language="C#" Value="public sealed class FormBuilderJson : Microsoft.Bot.Builder.FormFlow.FormBuilderBase&lt;Newtonsoft.Json.Linq.JObject&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormBuilderJson extends Microsoft.Bot.Builder.FormFlow.FormBuilderBase`1&lt;class Newtonsoft.Json.Linq.JObject&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormBuilderJson&#xA;Inherits FormBuilderBase(Of JObject)" />
  <TypeSignature Language="F#" Value="type FormBuilderJson = class&#xA;    inherit FormBuilderBase&lt;JObject&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
    <AssemblyVersion>3.20.1.42</AssemblyVersion>
    <AssemblyVersion>3.30.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Bot.Builder.FormFlow.FormBuilderBase&lt;Newtonsoft.Json.Linq.JObject&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Newtonsoft.Json.Linq.JObject</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Crie um formulário especificando mensagens, campos e confirmações por meio do esquema JSON ou de forma programática.</summary>
    <remarks>Defina um formulário por meio de [esquema JSON](http://json-schema.org/latest/json-schema-validation.html) com anotações adicionais opcionais que correspondam aos atributos fornecidos para C#.  
            % FormFlow usa um número de palavras-chave de [esquema JSON](http://json-schema.org/latest/json-schema-validation.html) padrão incluem: * `type` --define o tipo de campos.
            * `enum` --Define os valores de campo possíveis.
            * `minimum` --Define o valor mínimo permitido, conforme descrito em <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute" /> .
            * `maximum` --Define o valor máximo permitido, conforme descrito em <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute" /> .
            * `required` --Define quais campos são necessários.
            * `pattern` --Para campos de cadeia de caracteres serão usados para validar o padrão inserido, conforme descrito em <see cref="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute" /> .
            
Os modelos e os prompts usam o mesmo vocabulário de <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute" /> e <see cref="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute" /> .  
            Os nomes de propriedade são os mesmos e os valores são os mesmos que os da enumeração C# subjacente.  
            Por exemplo, para definir um modelo para substituir o <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NotUnderstood" /> modelo e especificar um TemplateBaseAttribute. choicestyle, você colocaria isso em seu esquema: ~ ~ ~ "templates": {"Iscompreendied": {Patterns: ["I não obtenho"], "choicestyle": "auto"}} ~ ~ ~ 
% Extensions definidas na raiz do esquema * `OnCompletion: script` --script C# com argumentos ( <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" /> contexto, estado JObject) para preencher o formulário.
            * `References: [assemblyReference, ...]` --Definir referências a serem incluídas em scripts.  Os caminhos devem ser absolutos ou relativos ao diretório atual.  Por padrão Microsoft.Bot.Builder.dll está incluído.
            * `Imports: [import, ...]` --Definir importações para incluir em scripts com o usando. Por padrão, esses namespaces são incluídos: Microsoft. bot. Builder, Microsoft. bot. Builder. Dialogers, Microsoft. bot. Builder. FormFlow, Microsoft. bot. Builder. FormFlow. Advanced, System. Collections. Generic, System. Linq 
% Extensions definidas na raiz de um esquema ou como um par da propriedade "Type".  
            * `Templates:{TemplateUsage: { Patterns:[string, ...], &lt;args&gt; }, ...}` --Definir modelos.
            * `Prompt: { Patterns:[string, ...] &lt;args&gt;}` --Defina um prompt.
            
% Extensions encontradas em uma descrição de propriedade como pares para a propriedade "Type" de um esquema JSON.
            * `DateTime:bool` --Marca um campo como sendo um campo de data e hora.
            * `Describe:string` --Descrição de um campo, conforme descrito em <see cref="T:Microsoft.Bot.Builder.FormFlow.DescribeAttribute" /> .
            * `Terms:[string,...]` --Expressões regulares para correspondência de um valor de campo, conforme descrito em <see cref="T:Microsoft.Bot.Builder.FormFlow.TermsAttribute" /> .
            * `MaxPhrase:int` --Isso vai executar seus termos <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)" /> para expandi-los.
            * `Values:{ string: {Describe:string, Terms:[string, ...], MaxPhrase}, ...}` --A cadeia de caracteres deve ser encontrada nos tipos "enum" e isso permite que você substitua as descrições e os termos gerados automaticamente.  Se MaxPhrase for especificado, os termos serão passados <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)" /> .
            * `Active:script` --Script C# com argumentos (estado JObject) – &gt; bool para testar para ver se o campo/mensagem/confirmar está ativo.
            * `Validate:script` --Script C# com argumentos (estado JObject, valor de objeto)- &gt; ValidateResult para validar um valor de campo.
            * `Define:script` --Script C# com argumentos (estado JObject, campo &lt; JObject &gt; do campo) para definir dinamicamente um campo.  
            * `Before:[confirm|message, ...]` --Mensagens ou confirmações antes do campo recipiente.
            * `After:[confirm|message, ...]` --Mensagens ou confirmações após o campo recipiente.
            * `{Confirm:script|[string, ...], ...templateArgs}` --With antes/depois define uma confirmação por meio de um script C# com argumento (estado JObject) ou por meio de um conjunto de padrões que serão selecionados aleatoriamente com argumentos de modelo opcionais.
            * `{Message:script|[string, ...] ...templateArgs}` --With antes/depois, defina uma mensagem por meio de um script C# com argumento (estado JObject) ou por meio de um conjunto de padrões que serão selecionados aleatoriamente com argumentos de modelo opcionais.
            * `Dependencies`: [cadeia de caracteres,...] '--Campos dos quais este campo, mensagem ou confirmação depende.
            
Scripts podem ser qualquer código C# que você encontraria em um corpo de método.  Você pode adicionar referências por meio de "referências" e usando por meio de "Imports". Variáveis globais especiais incluem: * `choice` --expedição interna para execução do script.
            * `state` --JObject estado do formulário associado a todos os scripts.
            * `ifield` -- <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1" /> para permitir o raciocínio sobre o campo atual de todos os scripts, exceto% Message/confirmar construtores de prompt.
            * `value` --valor do objeto a ser validado para validação.
            * `field` -- <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1" /> para permitir a atualização dinâmica de um campo em definir.
            * `context` -- <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" /> contexto para permitir a postagem de resultados em OnComplete.
            
% Campos definidos por meio dessa classe têm a mesma capacidade de estender ou substituir as definições programaticamente como qualquer outro campo.  Eles também podem ser localizados da mesma maneira.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormBuilderJson (Newtonsoft.Json.Linq.JObject schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Newtonsoft.Json.Linq.JObject schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.#ctor(Newtonsoft.Json.Linq.JObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schema As JObject)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson : Newtonsoft.Json.Linq.JObject -&gt; Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson" Usage="new Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson schema" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schema" Type="Newtonsoft.Json.Linq.JObject" />
      </Parameters>
      <Docs>
        <param name="schema">Esquema JSON que define o formulário.</param>
        <summary>Crie um construtor de formulários JSON.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRemainingFields">
      <MemberSignature Language="C#" Value="public override Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt; AddRemainingFields (System.Collections.Generic.IEnumerable&lt;string&gt; exclude = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;class Newtonsoft.Json.Linq.JObject&gt; AddRemainingFields(class System.Collections.Generic.IEnumerable`1&lt;string&gt; exclude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.AddRemainingFields(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddRemainingFields (Optional exclude As IEnumerable(Of String) = Nothing) As IFormBuilder(Of JObject)" />
      <MemberSignature Language="F#" Value="override this.AddRemainingFields : seq&lt;string&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="formBuilderJson.AddRemainingFields exclude" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exclude" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="exclude">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public override Microsoft.Bot.Builder.FormFlow.IForm&lt;Newtonsoft.Json.Linq.JObject&gt; Build (System.Reflection.Assembly resourceAssembly = default, string resourceName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Bot.Builder.FormFlow.IForm`1&lt;class Newtonsoft.Json.Linq.JObject&gt; Build(class System.Reflection.Assembly resourceAssembly, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Build(System.Reflection.Assembly,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Build (Optional resourceAssembly As Assembly = Nothing, Optional resourceName As String = Nothing) As IForm(Of JObject)" />
      <MemberSignature Language="F#" Value="override this.Build : System.Reflection.Assembly * string -&gt; Microsoft.Bot.Builder.FormFlow.IForm&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="formBuilderJson.Build (resourceAssembly, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IForm&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceAssembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceAssembly">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public override Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt; Field (string name, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; active = default, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; validate = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;class Newtonsoft.Json.Linq.JObject&gt; Field(string name, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Field(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{Newtonsoft.Json.Linq.JObject},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{Newtonsoft.Json.Linq.JObject})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Field (name As String, Optional active As ActiveDelegate(Of JObject) = Nothing, Optional validate As ValidateAsyncDelegate(Of JObject) = Nothing) As IFormBuilder(Of JObject)" />
      <MemberSignature Language="F#" Value="override this.Field : string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="formBuilderJson.Field (name, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="active">To be added.</param>
        <param name="validate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public override Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt; Field (string name, Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; active = default, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; validate = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;class Newtonsoft.Json.Linq.JObject&gt; Field(string name, class Microsoft.Bot.Builder.FormFlow.PromptAttribute prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Field(System.String,Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{Newtonsoft.Json.Linq.JObject},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{Newtonsoft.Json.Linq.JObject})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Field (name As String, prompt As PromptAttribute, Optional active As ActiveDelegate(Of JObject) = Nothing, Optional validate As ValidateAsyncDelegate(Of JObject) = Nothing) As IFormBuilder(Of JObject)" />
      <MemberSignature Language="F#" Value="override this.Field : string * Microsoft.Bot.Builder.FormFlow.PromptAttribute * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="formBuilderJson.Field (name, prompt, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.PromptAttribute" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="prompt">To be added.</param>
        <param name="active">To be added.</param>
        <param name="validate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public override Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt; Field (string name, string prompt, Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; active = default, Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; validate = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Bot.Builder.FormFlow.IFormBuilder`1&lt;class Newtonsoft.Json.Linq.JObject&gt; Field(string name, string prompt, class Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; active, class Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1&lt;class Newtonsoft.Json.Linq.JObject&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Field(System.String,System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{Newtonsoft.Json.Linq.JObject},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{Newtonsoft.Json.Linq.JObject})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Field (name As String, prompt As String, Optional active As ActiveDelegate(Of JObject) = Nothing, Optional validate As ValidateAsyncDelegate(Of JObject) = Nothing) As IFormBuilder(Of JObject)" />
      <MemberSignature Language="F#" Value="override this.Field : string * string * Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; * Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt; -&gt; Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;" Usage="formBuilderJson.Field (name, prompt, active, validate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.FormFlow.IFormBuilder&lt;Newtonsoft.Json.Linq.JObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="prompt" Type="System.String" />
        <Parameter Name="active" Type="Microsoft.Bot.Builder.FormFlow.ActiveDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
        <Parameter Name="validate" Type="Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate&lt;Newtonsoft.Json.Linq.JObject&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="prompt">To be added.</param>
        <param name="active">To be added.</param>
        <param name="validate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.Linq.JObject Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Newtonsoft.Json.Linq.JObject Schema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Schema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schema As JObject" />
      <MemberSignature Language="F#" Value="member this.Schema : Newtonsoft.Json.Linq.JObject" Usage="Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.FormFlow.Json</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
        <AssemblyVersion>3.30.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
