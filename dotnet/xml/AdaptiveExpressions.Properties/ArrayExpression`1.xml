<Type Name="ArrayExpression&lt;T&gt;" FullName="AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="93d301cf0271e4bffc408a85b67243184af01523" /><Meta Name="ms.sourcegitcommit" Value="d974a0b93f13db7720fcb332f37bf8a404d77e43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="09/20/2020" /><Meta Name="ms.locfileid" Value="93151359" /></Metadata><TypeSignature Language="C#" Value="public class ArrayExpression&lt;T&gt; : AdaptiveExpressions.Properties.ExpressionProperty&lt;System.Collections.Generic.List&lt;T&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ArrayExpression`1&lt;T&gt; extends AdaptiveExpressions.Properties.ExpressionProperty`1&lt;class System.Collections.Generic.List`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Properties.ArrayExpression`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ArrayExpression(Of T)&#xA;Inherits ExpressionProperty(Of List(Of T))" />
  <TypeSignature Language="F#" Value="type ArrayExpression&lt;'T&gt; = class&#xA;    inherit ExpressionProperty&lt;List&lt;'T&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>AdaptiveExpressions.Properties.ExpressionProperty&lt;System.Collections.Generic.List&lt;T&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">System.Collections.Generic.List&lt;T&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">tipo de objeto na matriz.</typeparam>
    <summary>Arrayid-representa uma propriedade que é um valor de matriz de T ou uma expressão de cadeia de caracteres a ser associada a uma matriz de T.</summary>
    <remarks>Os valores de cadeia de caracteres são sempre interpretados como uma expressão, se ele tem o prefixo ' = ' ou não.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Expression)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">expressão que é avaliada como matriz.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression (Newtonsoft.Json.Linq.JToken expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Newtonsoft.Json.Linq.JToken expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionOrValue As JToken)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; expressionOrValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">JToken que é uma coleção de (T) ou expressão que é avaliada como matriz.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression (System.Collections.Generic.IEnumerable&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; : seq&lt;'T&gt; -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">coleção de (T).</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression (Func&lt;object,object&gt; lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, object&gt; lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Func{System.Object,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (lambda As Func(Of Object, Object))" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; : Func&lt;obj, obj&gt; -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; lambda" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Object,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="lambda">função (dados) que é avaliada como matriz.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayExpression (string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As String)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; : string -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">expressão que é avaliada como matriz.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt; (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ArrayExpression`1&lt;!T&gt; op_Implicit(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ArrayExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Expression) As ArrayExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt; (Newtonsoft.Json.Linq.JToken expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ArrayExpression`1&lt;!T&gt; op_Implicit(class Newtonsoft.Json.Linq.JToken expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.ArrayExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expressionOrValue As JToken) As ArrayExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;.op_Implicit expressionOrValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt; (System.Collections.Generic.List&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ArrayExpression`1&lt;!T&gt; op_Implicit(class System.Collections.Generic.List`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(System.Collections.Generic.List{`0})~AdaptiveExpressions.Properties.ArrayExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As List(Of T)) As ArrayExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Collections.Generic.List&lt;'T&gt; -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Generic.List&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt; (string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ArrayExpression`1&lt;!T&gt; op_Implicit(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.ArrayExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As String) As ArrayExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt; (T[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ArrayExpression`1&lt;!T&gt; op_Implicit(!T[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ArrayExpression`1.op_Implicit(`0[])~AdaptiveExpressions.Properties.ArrayExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As T()) As ArrayExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ArrayExpression&lt;'T&gt;.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ArrayExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
