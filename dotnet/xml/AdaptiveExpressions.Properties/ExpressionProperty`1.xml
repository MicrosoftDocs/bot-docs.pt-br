<Type Name="ExpressionProperty&lt;T&gt;" FullName="AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="027dce4bbc059a937a4eef13e6ac8fbc6c7a495f" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94601828" /></Metadata><TypeSignature Language="C#" Value="public class ExpressionProperty&lt;T&gt; : AdaptiveExpressions.Properties.IExpressionProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionProperty`1&lt;T&gt; extends System.Object implements class AdaptiveExpressions.Properties.IExpressionProperty" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Properties.ExpressionProperty`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionProperty(Of T)&#xA;Implements IExpressionProperty" />
  <TypeSignature Language="F#" Value="type ExpressionProperty&lt;'T&gt; = class&#xA;    interface IExpressionProperty" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>AdaptiveExpressions.Properties.IExpressionProperty</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">tipo de objeto ao qual a expressão deve ser avaliada.</typeparam>
    <summary>Classe base que define uma expressão ou um valor para uma propriedade.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ExpressionProperty`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionProperty (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt; : obj -&gt; AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;" Usage="new AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Um objeto que contém o valor a ser definido.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.ExpressionProperty`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertObject">
      <MemberSignature Language="C#" Value="protected virtual T ConvertObject (object result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !T ConvertObject(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ConvertObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ConvertObject (result As Object) As T" />
      <MemberSignature Language="F#" Value="abstract member ConvertObject : obj -&gt; 'T&#xA;override this.ConvertObject : obj -&gt; 'T" Usage="expressionProperty.ConvertObject result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">resultado a ser convertido em objeto do tipo T.</param>
        <summary>Converta o objeto bruto para o tipo de valor desejado.</summary>
        <returns>objeto do tipo T.</returns>
        <remarks>Esse método é chamado sempre que um objeto é fected por meio de expressão ou é desserializado do texto não processado.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionText">
      <MemberSignature Language="C#" Value="public string ExpressionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionText" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.Properties.ExpressionProperty`1.ExpressionText" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpressionText As String" />
      <MemberSignature Language="F#" Value="member this.ExpressionText : string with get, set" Usage="AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;.ExpressionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o texto da expressão a ser avaliado para obter o valor.</summary>
        <value>O texto da expressão.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (data As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetObject : obj -&gt; obj&#xA;override this.GetObject : obj -&gt; obj" Usage="expressionProperty.GetObject data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.Properties.IExpressionProperty.GetObject(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">dados aos quais associar.</param>
        <summary>Obter valor como objeto.</summary>
        <returns>valor como objeto.</returns>
        <remarks>Métodos auxiliares que permitem trabalhar com os valores de propriedade de expressão como objetos puramente.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual T GetValue (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetValue(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (data As Object) As T" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj -&gt; 'T&#xA;override this.GetValue : obj -&gt; 'T" Usage="expressionProperty.GetValue data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">dados a serem usados para associação de expressão.</param>
        <summary>Obter o valor.</summary>
        <returns>Valor ou padrão (T) se não for encontrado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt; (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ExpressionProperty`1&lt;!T&gt; op_Implicit(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.ExpressionProperty{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Expression) As ExpressionProperty(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt; (string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ExpressionProperty`1&lt;!T&gt; op_Implicit(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.ExpressionProperty{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As String) As ExpressionProperty(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt; (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.ExpressionProperty`1&lt;!T&gt; op_Implicit(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.op_Implicit(`0)~AdaptiveExpressions.Properties.ExpressionProperty{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As T) As ExpressionProperty(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T -&gt; AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;" Usage="AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetObject (value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetObject : obj -&gt; unit&#xA;override this.SetObject : obj -&gt; unit" Usage="expressionProperty.SetObject value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.Properties.IExpressionProperty.SetObject(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">.</param>
        <summary>Defina o valor como objeto.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj -&gt; unit&#xA;override this.SetValue : obj -&gt; unit" Usage="expressionProperty.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser definido.</param>
        <summary>Define o valor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToExpression">
      <MemberSignature Language="C#" Value="public virtual AdaptiveExpressions.Expression ToExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AdaptiveExpressions.Expression ToExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ToExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToExpression () As Expression" />
      <MemberSignature Language="F#" Value="abstract member ToExpression : unit -&gt; AdaptiveExpressions.Expression&#xA;override this.ToExpression : unit -&gt; AdaptiveExpressions.Expression" Usage="expressionProperty.ToExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Isso retornará a expressão existente ou a constanty (valor) se o valor for um tipo não complexo.</summary>
        <returns>expressão.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expressionProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o objeto atual.</summary>
        <returns>Um valor da cadeia de caracteres.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetObject">
      <MemberSignature Language="C#" Value="public virtual (object,string) TryGetObject (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;object, string&gt; TryGetObject(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetObject (data As Object) As ValueTuple(Of Object, String)" />
      <MemberSignature Language="F#" Value="abstract member TryGetObject : obj -&gt; ValueTuple&lt;obj, string&gt;&#xA;override this.TryGetObject : obj -&gt; ValueTuple&lt;obj, string&gt;" Usage="expressionProperty.TryGetObject data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:AdaptiveExpressions.Properties.IExpressionProperty.TryGetObject(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Object,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "Error" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "Error" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">do modelo.</param>
        <summary>Tente obter o valor como objeto.</summary>
        <returns>Valor e erro.</returns>
        <remarks>Métodos auxiliares que permitem trabalhar com os valores de propriedade de expressão como objetos puramente.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public virtual (T,string) TryGetValue (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;!T, string&gt; TryGetValue(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetValue (data As Object) As ValueTuple(Of T, String)" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : obj -&gt; ValueTuple&lt;'T, string&gt;&#xA;override this.TryGetValue : obj -&gt; ValueTuple&lt;'T, string&gt;" Usage="expressionProperty.TryGetValue data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;T,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "Error" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Value", "Error" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">dados a serem usados para associação de expressão.</param>
        <summary>Tente obter o valor.</summary>
        <returns>value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:AdaptiveExpressions.Properties.ExpressionProperty`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As T" />
      <MemberSignature Language="F#" Value="member this.Value : 'T with get, set" Usage="AdaptiveExpressions.Properties.ExpressionProperty&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor bruto da Propriedade Expression.</summary>
        <value>O valor a ser retornado quando alguém chamar GetValue ().</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
