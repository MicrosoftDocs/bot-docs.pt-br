<Type Name="EnumExpression&lt;T&gt;" FullName="AdaptiveExpressions.Properties.EnumExpression&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b49c9c96de83dbc27e7ae2fd9e8c4a5865582ad4" /><Meta Name="ms.sourcegitcommit" Value="36928e6f81288095af0c66776a5ef320ec309c1a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pt-BR" /><Meta Name="ms.lasthandoff" Value="11/13/2020" /><Meta Name="ms.locfileid" Value="94601868" /></Metadata><TypeSignature Language="C#" Value="public class EnumExpression&lt;T&gt; : AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnumExpression`1&lt;struct .ctor (class System.ValueType) T&gt; extends AdaptiveExpressions.Properties.ExpressionProperty`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Properties.EnumExpression`1" />
  <TypeSignature Language="VB.NET" Value="Public Class EnumExpression(Of T)&#xA;Inherits ExpressionProperty(Of T)" />
  <TypeSignature Language="F#" Value="type EnumExpression&lt;'T (requires 'T : struct)&gt; = class&#xA;    inherit ExpressionProperty&lt;'T (requires 'T : struct)&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>AdaptiveExpressions.Properties.ExpressionProperty&lt;T&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">T</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">tipo de enumeração.</typeparam>
    <summary>Enumid-representa uma propriedade que é uma enum (T) ou uma expressão de cadeia de caracteres que resolve para um enum (T).</summary>
    <remarks>Os valores de cadeia de caracteres são sempre interpretados como uma enumeração, a menos que ele tenha o prefixo ' = ', caso em que ele é avaliado como uma expressão.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Expression)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">expressão a ser resolvida para uma enumeração.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression (Newtonsoft.Json.Linq.JToken expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Newtonsoft.Json.Linq.JToken expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionOrValue As JToken)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; expressionOrValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">valor jtoken a ser resolvido para uma enumeração.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression (Func&lt;object,object&gt; lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, object&gt; lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.Func{System.Object,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (lambda As Func(Of Object, Object))" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; : Func&lt;obj, obj&gt; -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; lambda" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Object,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="lambda">função (dados) que é avaliada como enumeração.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression (string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As String)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; : string -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">expressão a ser resolvida para uma enumeração.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumExpression (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; : 'T -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="new AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">valor de T.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.EnumExpression&lt;T&gt; (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.EnumExpression`1&lt;!T&gt; op_Implicit(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.EnumExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Expression) As EnumExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.EnumExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.EnumExpression&lt;T&gt; (Newtonsoft.Json.Linq.JToken value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.EnumExpression`1&lt;!T&gt; op_Implicit(class Newtonsoft.Json.Linq.JToken value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.EnumExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As JToken) As EnumExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.EnumExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.EnumExpression&lt;T&gt; (string expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.EnumExpression`1&lt;!T&gt; op_Implicit(string expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(System.String)~AdaptiveExpressions.Properties.EnumExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expressionOrValue As String) As EnumExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;.op_Implicit expressionOrValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.EnumExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.EnumExpression&lt;T&gt; (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.EnumExpression`1&lt;!T&gt; op_Implicit(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.op_Implicit(`0)~AdaptiveExpressions.Properties.EnumExpression{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As T) As EnumExpression(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T -&gt; AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;" Usage="AdaptiveExpressions.Properties.EnumExpression&lt;'T (requires 'T : struct)&gt;.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.EnumExpression&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public override void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.EnumExpression`1.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetValue (value As Object)" />
      <MemberSignature Language="F#" Value="override this.SetValue : obj -&gt; unit" Usage="enumExpression.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor a ser definido.</param>
        <summary>Define o valor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
