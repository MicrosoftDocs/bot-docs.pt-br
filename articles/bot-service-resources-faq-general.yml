### YamlMime:FAQ
metadata:
  title: Perguntas gerais frequentes sobre o bot Framework
  description: Respostas para perguntas frequentes comuns.
  services: service
  ms.service: bot-service
  ms.topic: article
  author: mmiele
  ms.author: botcc
  ms.date: 01/06/2020
  ms.openlocfilehash: c925e589adae104efbf4ff4cad126b31aa89433e
  ms.sourcegitcommit: aa5cc175ff15e7f9c8669e3b1398bc5db707af6e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/19/2021
  ms.locfileid: "98579720"
title: Perguntas gerais frequentes sobre o bot Framework
summary: >
  Este artigo responde a perguntas gerais frequentes.


  <!-- Attention writers!!
     1 - This article contains FAQs regarding Bot Framework generalities.
     1 - When you create a new FAQ, please add the related link to the proper section in bot-service-resources-bot-framework-faq.md.-->

  [!INCLUDE [applies-to-v4](includes/applies-to-v4-current.md)]
sections:
- name: Geral
  questions:
  - question: Por que a atividade de Digitação não gera nenhuma ação?
    answer: >
      Alguns canais não dão suporte a atualizações de digitação transitórias nos clientes.
  - question: Qual é a diferença entre a biblioteca do Connector e a biblioteca do Builder no SDK?
    answer: >
      A biblioteca do Connector é a exposição da API REST.

      A biblioteca do Builder inclui o modelo de programação de diálogo conversacional e outros recursos, como prompts, cascatas, cadeias e preenchimento de formulário guiado.

      A biblioteca do Builder também fornece acesso a serviços cognitivos como o LUIS.
  - question: Como as mensagens do usuário estão relacionadas às chamadas de método HTTPS?
    answer: >
      Quando o usuário enviar uma mensagem através de um canal, o serviço Web do Bot Framework emitirá um HTTPS POST para o ponto de extremidade do serviço Web do bot.

      O bot pode enviar zero, uma ou muitas mensagens de volta ao usuário naquele canal, emitindo um HTTPS POST separado para o Bot Framework para cada mensagem que envia.
  - question: Como é possível interceptar todas as mensagens entre o usuário e o bot?
    answer: >
      Com o SDK do Bot Framework para .NET, é possível fornecer implementações das interfaces `IPostToBot` e `IBotToUser` para o contêiner de injeção da dependência `Autofac`. Com o SDK do Bot Framework para qualquer linguagem, é possível usar o middleware para a mesma finalidade.

      O repositório [BotBuilder-Azure](https://github.com/Microsoft/BotBuilder-Azure) contém as bibliotecas do C# e Node.js que registrarão esses dados em uma tabela do Azure.
  - question: O que é o método IDialogStack.Forward no SDK do Bot Framework para .NET?
    answer: >
      A finalidade principal de `IDialogStack.Forward` é reutilizar um diálogo filho existente que seja frequentemente "reativo", em que o diálogo filho (em `IDialog.StartAsync`) aguarda um objeto `T` com algum manipulador `ResumeAfter`. Em particular, se tiver um diálogo filho que aguarda um `IMessageActivity``T`, você poderá encaminhar o `IMessageActivity` de entrada (já recebido por algum diálogo pai) usando o método `IDialogStack.Forward`.

      Por exemplo, para encaminhar um `IMessageActivity` de entrada para um `LuisDialog`, chame `IDialogStack.Forward` para efetuar push de `LuisDialog` para a pilha de diálogo, execute o código em `LuisDialog.StartAsync` até agendar uma espera pela próxima mensagem e, em seguida, imediatamente satisfazer essa espera com o `IMessageActivity` encaminhado.

      `T` é geralmente um `IMessageActivity`, uma vez que `IDialog.StartAsync` é normalmente construído para aguardar esse tipo de atividade. É possível usar `IDialogStack.Forward` como `LuisDialog` como um mecanismo para interceptar mensagens do usuário para algum processamento antes de encaminhar a mensagem para um `LuisDialog` existente.

      Alternativamente, também é possível usar `DispatchDialog` com `ContinueToNextGroup` para essa finalidade.


      Você esperaria encontrar o item encaminhado no primeiro manipulador `ResumeAfter` (p. ex. `LuisDialog.MessageReceived`) agendado por `StartAsync`.
  - question: Qual é a diferença entre "proativo" e "reativo"?
    answer: >
      Do ponto de vista do bot, "reativo" significa que o usuário inicia a conversa enviando uma mensagem para o bot e o bot reage respondendo a essa mensagem.

      Em contraste, "proativo" significa que o bot inicia a conversa, enviando a primeira mensagem ao usuário.

      Por exemplo, um bot pode enviar uma mensagem proativa para notificar um usuário quando um temporizador expirar ou ocorrer um evento.
  - question: Como enviar mensagens proativas ao usuário?
    answer: >
      Para obter exemplos que mostram como enviar mensagens proativas, consulte [Exemplos em C# V4](https://github.com/Microsoft/BotBuilder-Samples/tree/master/samples/csharp_dotnetcore/16.proactive-messages) e [Exemplos em Node.js V4](https://github.com/Microsoft/BotBuilder-Samples/tree/master/samples/javascript_nodejs/16.proactive-messages) no repositório BotBuilder-Samples no GitHub.
  - question: Como é possível referenciar serviços não serializáveis dos meus diálogos em C#? no SDK v3?
    answer: >
      Há várias opções:

      - Resolva a dependência através de `Autofac` e `FiberModule.Key_DoNotSerialize`. Essa é a solução mais limpa.

      - Use atributos [NonSerialized](https://msdn.microsoft.com/library/system.nonserializedattribute(v=vs.110).aspx) e [OnDeserialized](https://msdn.microsoft.com/library/system.runtime.serialization.ondeserializedattribute(v=vs.110).aspx) para restaurar a dependência da desserialização. Essa é a solução mais simples.

      - Não armazene essa dependência, para que não seja serializada. Essa solução, embora tecnicamente viável, não é recomendável.

      - Use o substituto de serialização de reflexão. Essa solução pode não ser viável em alguns casos e corre o risco de serializar demasiadamente.
  - question: O que é um ETag?  Qual a relação disso com o armazenamento de recipiente de dados de bot?
    answer: >
      Um [ETag](https://en.wikipedia.org/wiki/HTTP_ETag) é um mecanismo para [controle de simultaneidade otimista](https://en.wikipedia.org/wiki/Optimistic_concurrency_control).

      O armazenamento de recipiente de dados de bot usa ETags para impedir atualizações conflitantes nos dados. Um erro de ETag com o código de status HTTP 412 "Falha na pré-condição" indica que foram recebidas várias mensagens em paralelo antes que o bot pudesse concluir a primeira operação.

      O estado e a pilha de diálogo são armazenados em recipientes de dados de bot. Por exemplo, será possível ver o erro de ETag "Falha na Pré-Condição" se o bot ainda estiver processando uma mensagem anterior quando receber uma nova mensagem para essa conversa.
  - question: O que é a limitação de taxa?
    answer: >
      O serviço Bot Framework precisa proteger a si próprio e a seus clientes contra padrões de chamada abusivos (por exemplo, ataque de negação de serviço), de modo que nenhum bot possa prejudicar o desempenho de outros bots. Para obter esse tipo de proteção, adicionamos limites de taxa (também conhecidos como limitação) aos nossos pontos de extremidade. Impondo um limite de taxa, podemos restringir a frequência com a qual um cliente ou bot pode fazer uma chamada específica. Por exemplo: com a limitação de taxa habilitada, se um bot desejar postar um grande número de atividades, ele precisará espaçá-las por um período. Observe que a finalidade da limitação de taxa não é limitar o volume total de um bot. Ela se destina a prevenir abusos da infraestrutura de conversa que não seguem os padrões de conversa humana. Por exemplo, inundar duas conversas com mais conteúdo do que duas pessoas jamais poderiam consumir.
  - question: Quais são os limites de taxa?
    answer: >
      Estamos continuamente ajustando os limites de taxa para torná-los os mais brandos possíveis, ao mesmo tempo em que protegemos nosso serviço e nossos usuários.

      Como os limites serão alterados ocasionalmente, não estamos publicando os números no momento.  Por fim, se você estiver hospedando o bot em um serviço de aplicativo, o bot será associado às limitações do serviço de aplicativo. Para obter mais informações, consulte [Resumo de SLA para serviços do Azure](https://azure.microsoft.com/support/legal/sla/summary/) se você for afetado por limitação de taxa, fique à vontade para entrar em contato conosco em [bf-reports@microsoft.com](mailto://bf-reports@microsoft.com) .
  - question: Qual é o limite de tamanho de um arquivo transferido usando canais?
    answer: >
      Alguns canais têm limites de tamanho ou tipo de arquivos que podem ser enviados. Por exemplo, a linha direta e as cargas de atividade de limite do Facebook para **262.144 bytes**, enquanto o emulador não tem limite.

      Esses limites são impostos pelo canal. Se você enviar uma mensagem que exceda esse limite, você poderá receber um erro, como: *o tamanho do conteúdo da solicitação excedeu o limite de 262144 bytes*.

      No entanto, você pode fornecer um link para o recurso como um anexo da Internet. Para obter mais informações sobre como enviar anexos, consulte [como adicionar mídia a mensagens](v4sdk/bot-builder-howto-add-media-attachments.md).
  - question: Como saber se estou impactado pela limitação de taxa?
    answer: >
      É improvável que você enfrente a limitação de taxa, mesmo com um alto volume. A maior parte da limitação de taxa só ocorrerá devido ao envio em massa de atividades (de um bot ou de um cliente), um teste de carga extrema ou um bug.

      Quando uma solicitação é limitada, uma resposta HTTP 429 (Número Excessivo de Solicitações) é retornada juntamente com um cabeçalho Retry-After, que indica o tempo (em segundos) que é necessário aguardar antes do êxito da nova tentativa da solicitação. Colete essas informações habilitando a análise no bot por meio do Azure Application Insights. Se preferir, adicione um código ao bot para registrar mensagens em log.
  - question: Como ocorre a limitação de taxa?
    answer: >
      A limitação de taxa é causada por qualquer uma das seguintes condições:

      - Um bot envia mensagens com muita frequência

      - Um cliente de um bot envia mensagens com muita frequência

      - os clientes da Linha Direta solicitam um novo Soquete da Web com muita frequência
  - question: Como implementar a entrega humana?
    answer: >-
      Às vezes, é necessário transferir (entrega) uma conversa de um bot para um humano. Isso ocorre por exemplo, se o bot não entender o usuário, ou se a solicitação não puder ser automatizada.

      Nesses casos, o bot fornece uma transição para os seres humanos.

      O SDK do bot Framework dá suporte à entrega a um humano. Há alguns **tipos de evento** para a sinalização de operações de entrega.

      Esses eventos são trocados entre um **bot** e um **Hub de agente**, também chamado de Hub de envolvimento. Esse Hub de agente é definido como um aplicativo ou um sistema que permite que agentes, normalmente humanos, recebam e manipulem solicitações de usuários, bem como solicitações de escalonamento de bots.

      Para obter informações detalhadas, confira [conversações de transição do bot para](~/bot-service-design-pattern-handoff-human.md) o artigo humano.
